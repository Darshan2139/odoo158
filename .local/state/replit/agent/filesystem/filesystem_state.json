{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nRentPro is a professional rental management platform designed for equipment and inventory tracking. The application provides comprehensive functionality for managing rental businesses, including product catalog management, customer management, order processing, delivery scheduling, and payment tracking. It features a modern React frontend with a comprehensive UI component library and an Express.js backend with PostgreSQL database integration.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client application is built using React with TypeScript and follows a component-based architecture. The UI is constructed using Radix UI primitives with shadcn/ui components and styled with Tailwind CSS. The application uses Wouter for client-side routing and TanStack Query for server state management and caching.\n\n**Key Design Decisions:**\n- **Component Library**: Uses shadcn/ui components built on top of Radix UI primitives for accessibility and consistency\n- **Styling**: Tailwind CSS with custom CSS variables for theming and design tokens\n- **State Management**: TanStack Query for server state, local component state for UI interactions\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n## Backend Architecture\nThe server follows a REST API architecture built with Express.js and TypeScript. The application uses a modular structure with separate concerns for routing, storage, and server configuration.\n\n**Key Design Decisions:**\n- **API Design**: RESTful endpoints with consistent JSON responses\n- **Middleware**: Custom logging middleware for API request tracking\n- **Error Handling**: Centralized error handling with structured error responses\n- **Development Setup**: Vite integration for development with hot module replacement\n\n## Database Schema\nThe application uses PostgreSQL with Drizzle ORM for type-safe database operations. The schema supports a comprehensive rental management system with the following core entities:\n\n**Core Tables:**\n- **Users**: Customer and staff management with role-based access\n- **Products**: Equipment catalog with categories, pricing tiers, and availability tracking\n- **Orders**: Rental orders with line items and status management\n- **Deliveries**: Pickup and return scheduling with driver assignment\n- **Payments**: Payment tracking with multiple status states\n- **Notifications**: User notification system\n\n**Design Patterns:**\n- Enum types for consistent status values across entities\n- UUID primary keys for all tables\n- Timestamp tracking for audit trails\n- Decimal precision for financial calculations\n\n## Authentication & Authorization\nThe system implements a simple authentication mechanism with role-based access control supporting customer, staff, and admin roles. User passwords are stored directly (note: production systems should implement proper password hashing).\n\n## Data Flow & API Structure\nThe application follows a layered architecture:\n1. **Presentation Layer**: React components with shadcn/ui\n2. **API Layer**: Express.js REST endpoints\n3. **Business Logic**: Storage layer with TypeScript interfaces\n4. **Data Layer**: Drizzle ORM with PostgreSQL\n\n**API Endpoints Cover:**\n- Authentication (register/login)\n- Dashboard metrics and analytics\n- Product and category management\n- Order lifecycle management\n- Customer management\n- Delivery scheduling\n- Payment processing\n- Notification system\n\n# External Dependencies\n\n## Database\n- **PostgreSQL**: Primary database using Neon Database serverless\n- **Drizzle ORM**: Type-safe database operations with schema migrations\n- **Database Configuration**: Environment-based connection via DATABASE_URL\n\n## UI & Styling\n- **Radix UI**: Accessible component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n- **shadcn/ui**: Pre-built component library\n\n## State Management & Data Fetching\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime type validation and schema definition\n\n## Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Type safety across the application\n- **ESBuild**: Production bundling for server code\n- **Replit Integration**: Development environment optimizations\n\n## Third-Party Integrations\n- **Stripe**: Payment processing infrastructure (React Stripe.js)\n- **Date-fns**: Date manipulation and formatting utilities\n- **Connect-pg-simple**: PostgreSQL session store for Express sessions\n\nThe application is designed to be easily deployable with environment-based configuration and includes development-specific tooling for the Replit environment.","size_bytes":4836},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3067},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport Razorpay from \"razorpay\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertProductSchema, insertCategorySchema, insertOrderSchema, insertOrderItemSchema, insertDeliverySchema, insertPaymentSchema, insertNotificationSchema } from \"@shared/schema\";\n\n// Initialize Razorpay\nconst razorpay = new Razorpay({\n  key_id: process.env.RAZORPAY_KEY_ID || \"\",\n  key_secret: process.env.RAZORPAY_KEY_SECRET || \"\",\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const existingUser = await storage.getUserByEmail(userData.email);\n      \n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      const user = await storage.createUser(userData);\n      const { password, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      const user = await storage.getUserByEmail(email);\n      \n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const { password: _, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Dashboard routes\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const metrics = await storage.getDashboardMetrics();\n      res.json(metrics);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/dashboard/recent-orders\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const orders = await storage.getRecentOrders(limit);\n      res.json(orders);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Category routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Product routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const categoryId = req.query.categoryId as string;\n      const products = await storage.getProducts(categoryId);\n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, productData);\n      res.json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Order routes\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const customerId = req.query.customerId as string;\n      const orders = await storage.getOrders(customerId);\n      res.json(orders);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const { items, ...orderData } = req.body;\n      const orderInfo = insertOrderSchema.parse(orderData);\n      \n      // Create the order\n      const order = await storage.createOrder(orderInfo);\n      \n      // Create order items\n      for (const item of items) {\n        const orderItemData = insertOrderItemSchema.parse({\n          ...item,\n          orderId: order.id,\n        });\n        await storage.createOrderItem(orderItemData);\n        \n        // Update product availability\n        const product = await storage.getProduct(item.productId);\n        if (product) {\n          await storage.updateProductAvailability(\n            item.productId, \n            product.availableQuantity - item.quantity\n          );\n        }\n      }\n      \n      res.status(201).json(order);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/orders/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      res.json(order);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Customer routes\n  app.get(\"/api/customers\", async (req, res) => {\n    try {\n      // This would normally filter by role, but for simplicity we'll return all users\n      const users = Array.from((storage as any).users.values()).filter((user: any) => user.role === 'customer');\n      const customers = users.map((user: any) => {\n        const { password, ...userWithoutPassword } = user;\n        return userWithoutPassword;\n      });\n      res.json(customers);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Delivery routes\n  app.get(\"/api/deliveries\", async (req, res) => {\n    try {\n      const orderId = req.query.orderId as string;\n      const deliveries = await storage.getDeliveries(orderId);\n      res.json(deliveries);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/deliveries\", async (req, res) => {\n    try {\n      const deliveryData = insertDeliverySchema.parse(req.body);\n      const delivery = await storage.createDelivery(deliveryData);\n      res.status(201).json(delivery);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/deliveries/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      const delivery = await storage.updateDeliveryStatus(req.params.id, status);\n      res.json(delivery);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Payment routes\n  app.get(\"/api/payments\", async (req, res) => {\n    try {\n      const orderId = req.query.orderId as string;\n      const payments = await storage.getPayments(orderId);\n      res.json(payments);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/payments\", async (req, res) => {\n    try {\n      const paymentData = insertPaymentSchema.parse(req.body);\n      const payment = await storage.createPayment(paymentData);\n      res.status(201).json(payment);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Notification routes\n  app.get(\"/api/notifications/:userId\", async (req, res) => {\n    try {\n      const notifications = await storage.getNotifications(req.params.userId);\n      res.json(notifications);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/notifications\", async (req, res) => {\n    try {\n      const notificationData = insertNotificationSchema.parse(req.body);\n      const notification = await storage.createNotification(notificationData);\n      res.status(201).json(notification);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/notifications/:id/read\", async (req, res) => {\n    try {\n      const notification = await storage.markNotificationRead(req.params.id);\n      res.json(notification);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Razorpay payment routes\n  app.post(\"/api/razorpay/create-order\", async (req, res) => {\n    try {\n      const { amount, currency = \"INR\", receipt, notes } = req.body;\n      \n      const options = {\n        amount: Math.round(amount * 100), // Convert to smallest currency unit (paise for INR)\n        currency,\n        receipt: receipt || `receipt_${Date.now()}`,\n        notes: notes || {},\n      };\n\n      const razorpayOrder = await razorpay.orders.create(options);\n      res.json(razorpayOrder);\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error creating Razorpay order: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/razorpay/verify-payment\", async (req, res) => {\n    try {\n      const { razorpay_order_id, razorpay_payment_id, razorpay_signature, order_id } = req.body;\n      \n      // Verify the payment signature\n      const crypto = require('crypto');\n      const hmac = crypto.createHmac('sha256', process.env.RAZORPAY_KEY_SECRET);\n      hmac.update(razorpay_order_id + '|' + razorpay_payment_id);\n      const generated_signature = hmac.digest('hex');\n\n      if (generated_signature === razorpay_signature) {\n        // Payment is verified, update the order/payment status\n        if (order_id) {\n          // Update payment record\n          const payment = await storage.createPayment({\n            orderId: order_id,\n            amount: \"0\", // Will be updated with actual amount\n            paymentMethod: \"razorpay\",\n            status: \"paid\",\n            transactionId: razorpay_payment_id,\n            paidAt: new Date(),\n          });\n          \n          res.json({ \n            success: true, \n            message: \"Payment verified successfully\",\n            payment_id: razorpay_payment_id \n          });\n        } else {\n          res.json({ \n            success: true, \n            message: \"Payment verified successfully\",\n            payment_id: razorpay_payment_id \n          });\n        }\n      } else {\n        res.status(400).json({ \n          success: false, \n          message: \"Payment verification failed\" \n        });\n      }\n    } catch (error: any) {\n      res.status(500).json({ \n        success: false, \n        message: \"Error verifying payment: \" + error.message \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11439},"server/storage.ts":{"content":"import { type User, type InsertUser, type Product, type InsertProduct, type Category, type InsertCategory, type Order, type InsertOrder, type OrderItem, type InsertOrderItem, type Delivery, type InsertDelivery, type Payment, type InsertPayment, type Notification, type InsertNotification, type OrderWithDetails, type ProductWithCategory, type DashboardMetrics } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n\n  // Category operations\n  getCategories(): Promise<Category[]>;\n  getCategory(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n\n  // Product operations\n  getProducts(categoryId?: string): Promise<ProductWithCategory[]>;\n  getProduct(id: string): Promise<ProductWithCategory | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  updateProductAvailability(id: string, quantity: number): Promise<Product>;\n\n  // Order operations\n  getOrders(customerId?: string): Promise<OrderWithDetails[]>;\n  getOrder(id: string): Promise<OrderWithDetails | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrderStatus(id: string, status: string): Promise<Order>;\n\n  // Order item operations\n  createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n  getOrderItems(orderId: string): Promise<(OrderItem & { product: Product })[]>;\n\n  // Delivery operations\n  getDeliveries(orderId?: string): Promise<Delivery[]>;\n  createDelivery(delivery: InsertDelivery): Promise<Delivery>;\n  updateDeliveryStatus(id: string, status: string): Promise<Delivery>;\n\n  // Payment operations\n  getPayments(orderId?: string): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePaymentStatus(id: string, status: string): Promise<Payment>;\n\n  // Notification operations\n  getNotifications(userId: string): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationRead(id: string): Promise<Notification>;\n\n  // Dashboard operations\n  getDashboardMetrics(): Promise<DashboardMetrics>;\n  getRecentOrders(limit?: number): Promise<OrderWithDetails[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private categories: Map<string, Category> = new Map();\n  private products: Map<string, Product> = new Map();\n  private orders: Map<string, Order> = new Map();\n  private orderItems: Map<string, OrderItem> = new Map();\n  private deliveries: Map<string, Delivery> = new Map();\n  private payments: Map<string, Payment> = new Map();\n  private notifications: Map<string, Notification> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // Create sample categories\n    const photoCategory: Category = {\n      id: randomUUID(),\n      name: \"Photography Equipment\",\n      description: \"Professional cameras, lenses, and accessories\",\n      createdAt: new Date(),\n    };\n    \n    const audioCategory: Category = {\n      id: randomUUID(),\n      name: \"Audio Equipment\",\n      description: \"Microphones, speakers, and recording gear\",\n      createdAt: new Date(),\n    };\n\n    const lightingCategory: Category = {\n      id: randomUUID(),\n      name: \"Lighting Equipment\",\n      description: \"Professional lighting systems and accessories\",\n      createdAt: new Date(),\n    };\n\n    this.categories.set(photoCategory.id, photoCategory);\n    this.categories.set(audioCategory.id, audioCategory);\n    this.categories.set(lightingCategory.id, lightingCategory);\n\n    // Create sample products\n    const products: Product[] = [\n      {\n        id: randomUUID(),\n        name: \"Canon EOS R5\",\n        description: \"Professional full-frame mirrorless camera\",\n        categoryId: photoCategory.id,\n        dailyRate: \"89.00\",\n        weeklyRate: \"500.00\",\n        monthlyRate: \"1800.00\",\n        securityDeposit: \"2000.00\",\n        quantity: 3,\n        availableQuantity: 2,\n        status: \"available\",\n        imageUrl: \"https://images.unsplash.com/photo-1502920917128-1aa500764cbd?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        specifications: \"45MP full-frame sensor, 8K video recording\",\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"Audio-Technica AT2020\",\n        description: \"Professional studio condenser microphone\",\n        categoryId: audioCategory.id,\n        dailyRate: \"35.00\",\n        weeklyRate: \"200.00\",\n        monthlyRate: \"600.00\",\n        securityDeposit: \"300.00\",\n        quantity: 5,\n        availableQuantity: 4,\n        status: \"available\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        specifications: \"Cardioid polar pattern, 144 dB SPL maximum\",\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"Godox SL-60W\",\n        description: \"LED video light with Bowens mount\",\n        categoryId: lightingCategory.id,\n        dailyRate: \"45.00\",\n        weeklyRate: \"250.00\",\n        monthlyRate: \"800.00\",\n        securityDeposit: \"400.00\",\n        quantity: 4,\n        availableQuantity: 3,\n        status: \"available\",\n        imageUrl: \"https://images.unsplash.com/photo-1516035069371-29a1b244cc32?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        specifications: \"60W LED, 5600K color temperature, remote control\",\n        createdAt: new Date(),\n      },\n    ];\n\n    products.forEach(product => this.products.set(product.id, product));\n\n    // Create sample admin user\n    const adminUser: User = {\n      id: randomUUID(),\n      username: \"admin\",\n      email: \"admin@rentpro.com\",\n      password: \"hashed_password\",\n      firstName: \"John\",\n      lastName: \"Admin\",\n      phone: \"+1-555-0100\",\n      address: \"123 Admin Street, City, State 12345\",\n      role: \"admin\",\n      createdAt: new Date(),\n    };\n\n    this.users.set(adminUser.id, adminUser);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      createdAt: new Date(),\n      address: insertUser.address || null,\n      role: insertUser.role || \"customer\",\n      phone: insertUser.phone || null,\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, userUpdate: Partial<InsertUser>): Promise<User> {\n    const user = this.users.get(id);\n    if (!user) throw new Error(\"User not found\");\n    \n    const updatedUser = { ...user, ...userUpdate };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n\n  async getCategory(id: string): Promise<Category | undefined> {\n    return this.categories.get(id);\n  }\n\n  async createCategory(insertCategory: InsertCategory): Promise<Category> {\n    const id = randomUUID();\n    const category: Category = {\n      ...insertCategory,\n      id,\n      createdAt: new Date(),\n      description: insertCategory.description || null,\n    };\n    this.categories.set(id, category);\n    return category;\n  }\n\n  async getProducts(categoryId?: string): Promise<ProductWithCategory[]> {\n    const products = Array.from(this.products.values());\n    const filteredProducts = categoryId \n      ? products.filter(p => p.categoryId === categoryId)\n      : products;\n\n    return filteredProducts.map(product => ({\n      ...product,\n      category: product.categoryId ? this.categories.get(product.categoryId) || null : null,\n    }));\n  }\n\n  async getProduct(id: string): Promise<ProductWithCategory | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n\n    return {\n      ...product,\n      category: product.categoryId ? this.categories.get(product.categoryId) || null : null,\n    };\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const product: Product = {\n      ...insertProduct,\n      id,\n      availableQuantity: insertProduct.quantity || 0,\n      createdAt: new Date(),\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async updateProduct(id: string, productUpdate: Partial<InsertProduct>): Promise<Product> {\n    const product = this.products.get(id);\n    if (!product) throw new Error(\"Product not found\");\n    \n    const updatedProduct = { ...product, ...productUpdate };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async updateProductAvailability(id: string, quantity: number): Promise<Product> {\n    const product = this.products.get(id);\n    if (!product) throw new Error(\"Product not found\");\n    \n    const updatedProduct = { ...product, availableQuantity: quantity };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async getOrders(customerId?: string): Promise<OrderWithDetails[]> {\n    const orders = Array.from(this.orders.values());\n    const filteredOrders = customerId \n      ? orders.filter(o => o.customerId === customerId)\n      : orders;\n\n    return Promise.all(filteredOrders.map(async order => {\n      const customer = this.users.get(order.customerId)!;\n      const items = await this.getOrderItems(order.id);\n      const deliveries = Array.from(this.deliveries.values()).filter(d => d.orderId === order.id);\n      const payments = Array.from(this.payments.values()).filter(p => p.orderId === order.id);\n\n      return {\n        ...order,\n        customer,\n        items,\n        deliveries,\n        payments,\n      };\n    }));\n  }\n\n  async getOrder(id: string): Promise<OrderWithDetails | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n\n    const customer = this.users.get(order.customerId)!;\n    const items = await this.getOrderItems(order.id);\n    const deliveries = Array.from(this.deliveries.values()).filter(d => d.orderId === order.id);\n    const payments = Array.from(this.payments.values()).filter(p => p.orderId === order.id);\n\n    return {\n      ...order,\n      customer,\n      items,\n      deliveries,\n      payments,\n    };\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const orderNumber = `ORD-${new Date().getFullYear()}-${String(this.orders.size + 1).padStart(3, '0')}`;\n    \n    const order: Order = {\n      ...insertOrder,\n      id,\n      orderNumber,\n      createdAt: new Date(),\n      status: insertOrder.status || \"pending\",\n      notes: insertOrder.notes || null,\n    };\n    this.orders.set(id, order);\n    return order;\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order> {\n    const order = this.orders.get(id);\n    if (!order) throw new Error(\"Order not found\");\n    \n    const updatedOrder = { ...order, status: status as any };\n    this.orders.set(id, updatedOrder);\n    return updatedOrder;\n  }\n\n  async createOrderItem(insertOrderItem: InsertOrderItem): Promise<OrderItem> {\n    const id = randomUUID();\n    const orderItem: OrderItem = {\n      ...insertOrderItem,\n      id,\n    };\n    this.orderItems.set(id, orderItem);\n    return orderItem;\n  }\n\n  async getOrderItems(orderId: string): Promise<(OrderItem & { product: Product })[]> {\n    const items = Array.from(this.orderItems.values()).filter(item => item.orderId === orderId);\n    return items.map(item => ({\n      ...item,\n      product: this.products.get(item.productId)!,\n    }));\n  }\n\n  async getDeliveries(orderId?: string): Promise<Delivery[]> {\n    const deliveries = Array.from(this.deliveries.values());\n    return orderId ? deliveries.filter(d => d.orderId === orderId) : deliveries;\n  }\n\n  async createDelivery(insertDelivery: InsertDelivery): Promise<Delivery> {\n    const id = randomUUID();\n    const delivery: Delivery = {\n      ...insertDelivery,\n      id,\n      createdAt: new Date(),\n      status: insertDelivery.status || \"scheduled\",\n      notes: insertDelivery.notes || null,\n      driverName: insertDelivery.driverName || null,\n      driverPhone: insertDelivery.driverPhone || null,\n      estimatedArrival: insertDelivery.estimatedArrival || null,\n      completedAt: insertDelivery.completedAt || null,\n    };\n    this.deliveries.set(id, delivery);\n    return delivery;\n  }\n\n  async updateDeliveryStatus(id: string, status: string): Promise<Delivery> {\n    const delivery = this.deliveries.get(id);\n    if (!delivery) throw new Error(\"Delivery not found\");\n    \n    const updatedDelivery = { ...delivery, status: status as any };\n    this.deliveries.set(id, updatedDelivery);\n    return updatedDelivery;\n  }\n\n  async getPayments(orderId?: string): Promise<Payment[]> {\n    const payments = Array.from(this.payments.values());\n    return orderId ? payments.filter(p => p.orderId === orderId) : payments;\n  }\n\n  async createPayment(insertPayment: InsertPayment): Promise<Payment> {\n    const id = randomUUID();\n    const payment: Payment = {\n      ...insertPayment,\n      id,\n      createdAt: new Date(),\n      status: insertPayment.status || \"pending\",\n      transactionId: insertPayment.transactionId || null,\n      paidAt: insertPayment.paidAt || null,\n    };\n    this.payments.set(id, payment);\n    return payment;\n  }\n\n  async updatePaymentStatus(id: string, status: string): Promise<Payment> {\n    const payment = this.payments.get(id);\n    if (!payment) throw new Error(\"Payment not found\");\n    \n    const updatedPayment = { ...payment, status: status as any };\n    this.payments.set(id, updatedPayment);\n    return updatedPayment;\n  }\n\n  async getNotifications(userId: string): Promise<Notification[]> {\n    return Array.from(this.notifications.values()).filter(n => n.userId === userId);\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const id = randomUUID();\n    const notification: Notification = {\n      ...insertNotification,\n      id,\n      createdAt: new Date(),\n      read: insertNotification.read || false,\n    };\n    this.notifications.set(id, notification);\n    return notification;\n  }\n\n  async markNotificationRead(id: string): Promise<Notification> {\n    const notification = this.notifications.get(id);\n    if (!notification) throw new Error(\"Notification not found\");\n    \n    const updatedNotification = { ...notification, read: true };\n    this.notifications.set(id, updatedNotification);\n    return updatedNotification;\n  }\n\n  async getDashboardMetrics(): Promise<DashboardMetrics> {\n    const orders = Array.from(this.orders.values());\n    const payments = Array.from(this.payments.values());\n    const products = Array.from(this.products.values());\n    const users = Array.from(this.users.values());\n\n    const totalRevenue = payments\n      .filter(p => p.status === 'paid')\n      .reduce((sum, p) => sum + parseFloat(p.amount), 0);\n\n    const activeRentals = orders.filter(o => o.status === 'delivered').length;\n    \n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const newCustomers = users.filter(u => u.createdAt > thirtyDaysAgo && u.role === 'customer').length;\n\n    const totalQuantity = products.reduce((sum, p) => sum + p.quantity, 0);\n    const rentedQuantity = products.reduce((sum, p) => sum + (p.quantity - p.availableQuantity), 0);\n    const inventoryUtilization = totalQuantity > 0 ? Math.round((rentedQuantity / totalQuantity) * 100) : 0;\n\n    return {\n      totalRevenue,\n      activeRentals,\n      newCustomers,\n      inventoryUtilization,\n    };\n  }\n\n  async getRecentOrders(limit: number = 10): Promise<OrderWithDetails[]> {\n    const orders = await this.getOrders();\n    return orders\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, limit);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":16315},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum(\"user_role\", [\"customer\", \"admin\", \"staff\"]);\nexport const orderStatusEnum = pgEnum(\"order_status\", [\"pending\", \"confirmed\", \"delivered\", \"returned\", \"cancelled\"]);\nexport const deliveryStatusEnum = pgEnum(\"delivery_status\", [\"scheduled\", \"in_transit\", \"delivered\", \"completed\"]);\nexport const deliveryTypeEnum = pgEnum(\"delivery_type\", [\"pickup\", \"return\"]);\nexport const productStatusEnum = pgEnum(\"product_status\", [\"available\", \"rented\", \"maintenance\"]);\nexport const paymentStatusEnum = pgEnum(\"payment_status\", [\"pending\", \"paid\", \"overdue\", \"refunded\"]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  role: userRoleEnum(\"role\").default(\"customer\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Product categories\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  dailyRate: decimal(\"daily_rate\", { precision: 10, scale: 2 }).notNull(),\n  weeklyRate: decimal(\"weekly_rate\", { precision: 10, scale: 2 }),\n  monthlyRate: decimal(\"monthly_rate\", { precision: 10, scale: 2 }),\n  securityDeposit: decimal(\"security_deposit\", { precision: 10, scale: 2 }).notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  availableQuantity: integer(\"available_quantity\").notNull().default(1),\n  status: productStatusEnum(\"status\").default(\"available\").notNull(),\n  imageUrl: text(\"image_url\"),\n  specifications: text(\"specifications\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderNumber: text(\"order_number\").notNull().unique(),\n  customerId: varchar(\"customer_id\").references(() => users.id).notNull(),\n  status: orderStatusEnum(\"status\").default(\"pending\").notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  securityDeposit: decimal(\"security_deposit\", { precision: 10, scale: 2 }).notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Order items table\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  dailyRate: decimal(\"daily_rate\", { precision: 10, scale: 2 }).notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// Deliveries table\nexport const deliveries = pgTable(\"deliveries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id).notNull(),\n  type: deliveryTypeEnum(\"type\").notNull(),\n  scheduledDate: timestamp(\"scheduled_date\").notNull(),\n  scheduledTime: text(\"scheduled_time\").notNull(),\n  status: deliveryStatusEnum(\"status\").default(\"scheduled\").notNull(),\n  driverName: text(\"driver_name\"),\n  driverPhone: text(\"driver_phone\"),\n  address: text(\"address\").notNull(),\n  notes: text(\"notes\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Payments table\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  status: paymentStatusEnum(\"status\").default(\"pending\").notNull(),\n  paymentMethod: text(\"payment_method\").notNull(),\n  transactionId: text(\"transaction_id\"),\n  paidAt: timestamp(\"paid_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // info, warning, error, success\n  read: boolean(\"read\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  availableQuantity: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  orderNumber: true,\n  createdAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\n\nexport const insertDeliverySchema = createInsertSchema(deliveries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\n\nexport type Delivery = typeof deliveries.$inferSelect;\nexport type InsertDelivery = z.infer<typeof insertDeliverySchema>;\n\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\n\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\n// Extended types for frontend\nexport type OrderWithDetails = Order & {\n  customer: User;\n  items: (OrderItem & { product: Product })[];\n  deliveries: Delivery[];\n  payments: Payment[];\n};\n\nexport type ProductWithCategory = Product & {\n  category: Category | null;\n};\n\nexport type DashboardMetrics = {\n  totalRevenue: number;\n  activeRentals: number;\n  newCustomers: number;\n  inventoryUtilization: number;\n};\n","size_bytes":7625},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Products from \"@/pages/products\";\nimport Orders from \"@/pages/orders\";\nimport Customers from \"@/pages/customers\";\nimport Booking from \"@/pages/booking\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/orders\" component={Orders} />\n      <Route path=\"/customers\" component={Customers} />\n      <Route path=\"/booking\" component={Booking} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1142},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(213.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(255.8863 88.2845% 63.1373%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(213.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --success: hsl(159.7826 100% 36.0784%);\n  --success-foreground: hsl(0 0% 100%);\n  --warning: hsl(42.0290 92.8251% 56.2745%);\n  --warning-foreground: hsl(0 0% 0%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(213.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(213.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(213.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(213.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(255.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(213.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --success: hsl(159.7826 100% 36.0784%);\n  --success-foreground: hsl(0 0% 100%);\n  --warning: hsl(42.0290 92.8251% 56.2745%);\n  --warning-foreground: hsl(0 0% 0%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(213.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(213.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.status-available {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-rented {\n  @apply bg-yellow-100 text-yellow-800;\n}\n\n.status-maintenance {\n  @apply bg-red-100 text-red-800;\n}\n\n.status-pending {\n  @apply bg-yellow-100 text-yellow-800;\n}\n\n.status-confirmed {\n  @apply bg-blue-100 text-blue-800;\n}\n\n.status-delivered {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-returned {\n  @apply bg-gray-100 text-gray-800;\n}\n\n.status-cancelled {\n  @apply bg-red-100 text-red-800;\n}\n","size_bytes":5966},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/navigation-header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Bell } from \"lucide-react\";\n\nexport function NavigationHeader() {\n  const [location] = useLocation();\n\n  const navigation = [\n    { name: \"Dashboard\", href: \"/dashboard\", current: location === \"/\" || location === \"/dashboard\" },\n    { name: \"Products\", href: \"/products\", current: location === \"/products\" },\n    { name: \"Orders\", href: \"/orders\", current: location === \"/orders\" },\n    { name: \"Customers\", href: \"/customers\", current: location === \"/customers\" },\n    { name: \"Booking\", href: \"/booking\", current: location === \"/booking\" },\n  ];\n\n  return (\n    <nav className=\"bg-white border-b border-gray-200 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <Link href=\"/\">\n                <div className=\"flex items-center cursor-pointer\">\n                  <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                    <span className=\"text-white font-bold text-lg\">R</span>\n                  </div>\n                  <span className=\"ml-2 text-xl font-bold text-gray-900\">RentPro</span>\n                </div>\n              </Link>\n            </div>\n            <div className=\"hidden md:block ml-10\">\n              <div className=\"flex items-baseline space-x-4\">\n                {navigation.map((item) => (\n                  <Link\n                    key={item.name}\n                    href={item.href}\n                    className={`${\n                      item.current\n                        ? \"text-primary border-b-2 border-primary\"\n                        : \"text-gray-500 hover:text-gray-700\"\n                    } px-3 py-2 text-sm font-medium transition-colors`}\n                  >\n                    {item.name}\n                  </Link>\n                ))}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            {/* Search Bar */}\n            <div className=\"relative hidden sm:block\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search products, orders...\"\n                className=\"w-64 pl-10\"\n              />\n            </div>\n            \n            {/* Notifications */}\n            <div className=\"relative\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                <Bell className=\"h-5 w-5 text-gray-400\" />\n                <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 h-4 w-4 p-0 flex items-center justify-center text-xs\">\n                  3\n                </Badge>\n              </Button>\n            </div>\n            \n            {/* User Profile */}\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center\">\n                <span className=\"text-sm font-medium text-gray-600\">JA</span>\n              </div>\n              <span className=\"text-sm font-medium text-gray-700 hidden sm:block\">John Admin</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3541},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\nimport type { DashboardMetrics, OrderWithDetails, ProductWithCategory, Category, User, Delivery, Payment, Notification } from \"@shared/schema\";\n\nexport const api = {\n  // Dashboard\n  getDashboardMetrics: () => \n    apiRequest(\"GET\", \"/api/dashboard/metrics\").then(res => res.json()) as Promise<DashboardMetrics>,\n  \n  getRecentOrders: (limit?: number) =>\n    apiRequest(\"GET\", `/api/dashboard/recent-orders${limit ? `?limit=${limit}` : \"\"}`).then(res => res.json()) as Promise<OrderWithDetails[]>,\n\n  // Products\n  getProducts: (categoryId?: string) =>\n    apiRequest(\"GET\", `/api/products${categoryId ? `?categoryId=${categoryId}` : \"\"}`).then(res => res.json()) as Promise<ProductWithCategory[]>,\n  \n  getProduct: (id: string) =>\n    apiRequest(\"GET\", `/api/products/${id}`).then(res => res.json()) as Promise<ProductWithCategory>,\n\n  createProduct: (product: any) =>\n    apiRequest(\"POST\", \"/api/products\", product).then(res => res.json()),\n\n  updateProduct: (id: string, product: any) =>\n    apiRequest(\"PUT\", `/api/products/${id}`, product).then(res => res.json()),\n\n  // Categories\n  getCategories: () =>\n    apiRequest(\"GET\", \"/api/categories\").then(res => res.json()) as Promise<Category[]>,\n\n  createCategory: (category: any) =>\n    apiRequest(\"POST\", \"/api/categories\", category).then(res => res.json()),\n\n  // Orders\n  getOrders: (customerId?: string) =>\n    apiRequest(\"GET\", `/api/orders${customerId ? `?customerId=${customerId}` : \"\"}`).then(res => res.json()) as Promise<OrderWithDetails[]>,\n  \n  getOrder: (id: string) =>\n    apiRequest(\"GET\", `/api/orders/${id}`).then(res => res.json()) as Promise<OrderWithDetails>,\n\n  createOrder: (order: any) =>\n    apiRequest(\"POST\", \"/api/orders\", order).then(res => res.json()),\n\n  updateOrderStatus: (id: string, status: string) =>\n    apiRequest(\"PUT\", `/api/orders/${id}/status`, { status }).then(res => res.json()),\n\n  // Customers\n  getCustomers: () =>\n    apiRequest(\"GET\", \"/api/customers\").then(res => res.json()) as Promise<User[]>,\n\n  // Deliveries\n  getDeliveries: (orderId?: string) =>\n    apiRequest(\"GET\", `/api/deliveries${orderId ? `?orderId=${orderId}` : \"\"}`).then(res => res.json()) as Promise<Delivery[]>,\n\n  createDelivery: (delivery: any) =>\n    apiRequest(\"POST\", \"/api/deliveries\", delivery).then(res => res.json()),\n\n  updateDeliveryStatus: (id: string, status: string) =>\n    apiRequest(\"PUT\", `/api/deliveries/${id}/status`, { status }).then(res => res.json()),\n\n  // Payments\n  getPayments: (orderId?: string) =>\n    apiRequest(\"GET\", `/api/payments${orderId ? `?orderId=${orderId}` : \"\"}`).then(res => res.json()) as Promise<Payment[]>,\n\n  createPayment: (payment: any) =>\n    apiRequest(\"POST\", \"/api/payments\", payment).then(res => res.json()),\n\n  // Notifications\n  getNotifications: (userId: string) =>\n    apiRequest(\"GET\", `/api/notifications/${userId}`).then(res => res.json()) as Promise<Notification[]>,\n\n  createNotification: (notification: any) =>\n    apiRequest(\"POST\", \"/api/notifications\", notification).then(res => res.json()),\n\n  markNotificationRead: (id: string) =>\n    apiRequest(\"PUT\", `/api/notifications/${id}/read`).then(res => res.json()),\n\n  // Auth\n  register: (user: any) =>\n    apiRequest(\"POST\", \"/api/auth/register\", user).then(res => res.json()),\n\n  login: (credentials: { email: string; password: string }) =>\n    apiRequest(\"POST\", \"/api/auth/login\", credentials).then(res => res.json()),\n};\n","size_bytes":3460},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/booking.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { BookingModal } from \"@/components/booking/booking-modal\";\nimport { ProductGrid } from \"@/components/products/product-grid\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ShoppingCart, Calendar, User, CreditCard } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface BookingItem {\n  productId: string;\n  product: any;\n  quantity: number;\n  dailyRate: string;\n}\n\nexport default function Booking() {\n  const [isBookingModalOpen, setIsBookingModalOpen] = useState(false);\n  const [selectedItems, setSelectedItems] = useState<BookingItem[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: products } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: () => api.getProducts(),\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: (orderData: any) => api.createOrder(orderData),\n    onSuccess: () => {\n      toast({\n        title: \"Order Created\",\n        description: \"Your rental order has been successfully created.\",\n      });\n      setSelectedItems([]);\n      setIsBookingModalOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addToCart = (product: any) => {\n    const existingItem = selectedItems.find(item => item.productId === product.id);\n    \n    if (existingItem) {\n      setSelectedItems(items =>\n        items.map(item =>\n          item.productId === product.id\n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        )\n      );\n    } else {\n      setSelectedItems(items => [\n        ...items,\n        {\n          productId: product.id,\n          product,\n          quantity: 1,\n          dailyRate: product.dailyRate,\n        }\n      ]);\n    }\n\n    toast({\n      title: \"Added to Cart\",\n      description: `${product.name} has been added to your booking.`,\n    });\n  };\n\n  const removeFromCart = (productId: string) => {\n    setSelectedItems(items => items.filter(item => item.productId !== productId));\n  };\n\n  const updateQuantity = (productId: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n\n    setSelectedItems(items =>\n      items.map(item =>\n        item.productId === productId\n          ? { ...item, quantity }\n          : item\n      )\n    );\n  };\n\n  const calculateTotal = (days: number = 1) => {\n    return selectedItems.reduce((total, item) => {\n      return total + (parseFloat(item.dailyRate) * item.quantity * days);\n    }, 0);\n  };\n\n  const handleCreateOrder = (orderData: any) => {\n    const items = selectedItems.map(item => ({\n      productId: item.productId,\n      quantity: item.quantity,\n      dailyRate: item.dailyRate,\n      totalAmount: (parseFloat(item.dailyRate) * item.quantity * orderData.days).toString(),\n    }));\n\n    createOrderMutation.mutate({\n      ...orderData,\n      items,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Create New Booking</h1>\n          <p className=\"text-gray-600\">Select equipment and create a rental order for your customer.</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Product Selection */}\n          <div className=\"lg:col-span-3\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Available Equipment</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ProductGrid \n                  products={products?.filter(p => p.availableQuantity > 0)}\n                  onAddToCart={addToCart}\n                  showAddToCart\n                />\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Booking Cart */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-4\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <ShoppingCart className=\"w-5 h-5 mr-2\" />\n                  Booking Cart\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {selectedItems.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {selectedItems.map((item) => (\n                      <div key={item.productId} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"text-sm font-medium text-gray-900 truncate\">\n                            {item.product.name}\n                          </h4>\n                          <p className=\"text-sm text-gray-500\">\n                            ${item.dailyRate}/day\n                          </p>\n                          <div className=\"flex items-center mt-2\">\n                            <button\n                              onClick={() => updateQuantity(item.productId, item.quantity - 1)}\n                              className=\"w-6 h-6 rounded-full border border-gray-300 flex items-center justify-center text-gray-500 hover:bg-gray-50\"\n                            >\n                              -\n                            </button>\n                            <span className=\"mx-3 text-sm font-medium\">{item.quantity}</span>\n                            <button\n                              onClick={() => updateQuantity(item.productId, item.quantity + 1)}\n                              className=\"w-6 h-6 rounded-full border border-gray-300 flex items-center justify-center text-gray-500 hover:bg-gray-50\"\n                            >\n                              +\n                            </button>\n                          </div>\n                        </div>\n                        <button\n                          onClick={() => removeFromCart(item.productId)}\n                          className=\"ml-2 text-red-500 hover:text-red-700\"\n                        >\n                          ×\n                        </button>\n                      </div>\n                    ))}\n\n                    <div className=\"border-t pt-4\">\n                      <div className=\"flex justify-between text-sm text-gray-600 mb-2\">\n                        <span>Subtotal (1 day):</span>\n                        <span>${calculateTotal().toFixed(2)}</span>\n                      </div>\n                      <div className=\"flex justify-between font-semibold text-gray-900\">\n                        <span>Total Items:</span>\n                        <span>{selectedItems.reduce((sum, item) => sum + item.quantity, 0)}</span>\n                      </div>\n                    </div>\n\n                    <Button \n                      className=\"w-full\" \n                      onClick={() => setIsBookingModalOpen(true)}\n                    >\n                      Continue to Booking\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <ShoppingCart className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                    <p className=\"text-gray-500 text-sm\">\n                      Select equipment to start building your rental order\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Booking Process Steps */}\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle className=\"text-sm\">Booking Process</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center text-sm\">\n                  <div className=\"w-6 h-6 rounded-full bg-primary text-white flex items-center justify-center text-xs mr-3\">\n                    1\n                  </div>\n                  <span>Select Equipment</span>\n                </div>\n                <div className=\"flex items-center text-sm text-gray-500\">\n                  <div className=\"w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center text-xs mr-3\">\n                    2\n                  </div>\n                  <span>Customer Info</span>\n                </div>\n                <div className=\"flex items-center text-sm text-gray-500\">\n                  <div className=\"w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center text-xs mr-3\">\n                    3\n                  </div>\n                  <span>Rental Dates</span>\n                </div>\n                <div className=\"flex items-center text-sm text-gray-500\">\n                  <div className=\"w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center text-xs mr-3\">\n                    4\n                  </div>\n                  <span>Confirmation</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Booking Modal */}\n      {isBookingModalOpen && (\n        <BookingModal\n          isOpen={isBookingModalOpen}\n          onClose={() => setIsBookingModalOpen(false)}\n          selectedItems={selectedItems}\n          onCreateOrder={handleCreateOrder}\n          isLoading={createOrderMutation.isPending}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":9911},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Search, Eye, Mail, Phone } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\n\nexport default function Customers() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: customers, isLoading } = useQuery({\n    queryKey: [\"/api/customers\"],\n    queryFn: () => api.getCustomers(),\n  });\n\n  const { data: orders } = useQuery({\n    queryKey: [\"/api/orders\"],\n    queryFn: () => api.getOrders(),\n  });\n\n  const filteredCustomers = customers?.filter(customer => {\n    const matchesSearch = customer.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         customer.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         customer.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         customer.phone?.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  });\n\n  const getCustomerStats = (customerId: string) => {\n    const customerOrders = orders?.filter(order => order.customerId === customerId) || [];\n    const totalSpent = customerOrders.reduce((sum, order) => sum + parseFloat(order.totalAmount), 0);\n    const activeRentals = customerOrders.filter(order => order.status === 'delivered').length;\n    \n    return {\n      totalOrders: customerOrders.length,\n      totalSpent,\n      activeRentals,\n      lastOrder: customerOrders.length > 0 ? \n        Math.max(...customerOrders.map(o => new Date(o.createdAt).getTime())) : null\n    };\n  };\n\n  const formatCurrency = (amount: number) => {\n    return `$${amount.toLocaleString()}`;\n  };\n\n  const formatLastOrder = (timestamp: number | null) => {\n    if (!timestamp) return \"Never\";\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 0) return \"Today\";\n    if (diffDays === 1) return \"Yesterday\";\n    if (diffDays < 30) return `${diffDays} days ago`;\n    if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`;\n    return `${Math.floor(diffDays / 365)} years ago`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <NavigationHeader />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4 sm:mb-0\">Customers</h1>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Customer\n            </Button>\n          </div>\n\n          {/* Search */}\n          <div className=\"relative max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder=\"Search customers...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* Customer Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-gray-900\">{customers?.length || 0}</div>\n              <div className=\"text-sm text-gray-500\">Total Customers</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-gray-900\">\n                {customers?.filter(c => {\n                  const stats = getCustomerStats(c.id);\n                  return stats.activeRentals > 0;\n                }).length || 0}\n              </div>\n              <div className=\"text-sm text-gray-500\">Active Customers</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-gray-900\">\n                {customers?.filter(c => {\n                  const thirtyDaysAgo = new Date();\n                  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n                  return new Date(c.createdAt) > thirtyDaysAgo;\n                }).length || 0}\n              </div>\n              <div className=\"text-sm text-gray-500\">New This Month</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(\n                  customers?.reduce((total, customer) => {\n                    const stats = getCustomerStats(customer.id);\n                    return total + stats.totalSpent;\n                  }, 0) || 0\n                )}\n              </div>\n              <div className=\"text-sm text-gray-500\">Total Revenue</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Customers Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>All Customers</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Customer\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Contact\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Orders\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Total Spent\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Last Order\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {filteredCustomers && filteredCustomers.length > 0 ? (\n                    filteredCustomers.map((customer) => {\n                      const stats = getCustomerStats(customer.id);\n                      return (\n                        <tr key={customer.id} className=\"hover:bg-gray-50\">\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <div className=\"h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center\">\n                                <span className=\"text-sm font-medium text-gray-600\">\n                                  {customer.firstName[0]}{customer.lastName[0]}\n                                </span>\n                              </div>\n                              <div className=\"ml-4\">\n                                <div className=\"text-sm font-medium text-gray-900\">\n                                  {customer.firstName} {customer.lastName}\n                                </div>\n                                <div className=\"text-sm text-gray-500\">\n                                  Member since {new Date(customer.createdAt).toLocaleDateString()}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4\">\n                            <div className=\"space-y-1\">\n                              <div className=\"flex items-center text-sm text-gray-900\">\n                                <Mail className=\"w-4 h-4 mr-2 text-gray-400\" />\n                                {customer.email}\n                              </div>\n                              {customer.phone && (\n                                <div className=\"flex items-center text-sm text-gray-500\">\n                                  <Phone className=\"w-4 h-4 mr-2 text-gray-400\" />\n                                  {customer.phone}\n                                </div>\n                              )}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm text-gray-900\">{stats.totalOrders}</div>\n                            {stats.activeRentals > 0 && (\n                              <div className=\"text-sm text-gray-500\">\n                                {stats.activeRentals} active\n                              </div>\n                            )}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <span className=\"text-sm font-semibold text-gray-900\">\n                              {formatCurrency(stats.totalSpent)}\n                            </span>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm text-gray-900\">\n                              {formatLastOrder(stats.lastOrder)}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge variant={stats.activeRentals > 0 ? \"default\" : \"secondary\"}>\n                              {stats.activeRentals > 0 ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Eye className=\"w-4 h-4 mr-1\" />\n                              View\n                            </Button>\n                          </td>\n                        </tr>\n                      );\n                    })\n                  ) : (\n                    <tr>\n                      <td colSpan={7} className=\"px-6 py-8 text-center\">\n                        <div className=\"text-gray-500\">\n                          {searchTerm ? \"No customers match your search\" : \"No customers found\"}\n                        </div>\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Pagination */}\n            {filteredCustomers && filteredCustomers.length > 0 && (\n              <div className=\"mt-6 flex items-center justify-between\">\n                <p className=\"text-sm text-gray-700\">\n                  Showing <span className=\"font-medium\">1</span> to{' '}\n                  <span className=\"font-medium\">{Math.min(10, filteredCustomers.length)}</span> of{' '}\n                  <span className=\"font-medium\">{filteredCustomers.length}</span> customers\n                </p>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Previous\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"bg-primary text-white\">\n                    1\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Next\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12815},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { MetricsCards } from \"@/components/dashboard/metrics-cards\";\nimport { RecentOrders } from \"@/components/dashboard/recent-orders\";\nimport { ProductGrid } from \"@/components/products/product-grid\";\nimport { DeliveryScheduler } from \"@/components/delivery/delivery-scheduler\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CalendarDays, Bell, Plus, Download } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\n\nexport default function Dashboard() {\n  const { data: metrics } = useQuery({\n    queryKey: [\"/api/dashboard/metrics\"],\n    queryFn: () => api.getDashboardMetrics(),\n  });\n\n  const { data: notifications } = useQuery({\n    queryKey: [\"/api/notifications\", \"admin-user-id\"],\n    queryFn: () => api.getNotifications(\"admin-user-id\"),\n  });\n\n  const { data: deliveries } = useQuery({\n    queryKey: [\"/api/deliveries\"],\n    queryFn: () => api.getDeliveries(),\n  });\n\n  const quickActions = [\n    {\n      icon: Plus,\n      label: \"Create New Order\",\n      action: \"createOrder\",\n      bgColor: \"bg-blue-100\",\n      iconColor: \"text-primary\",\n    },\n    {\n      icon: Plus,\n      label: \"Add Customer\",\n      action: \"addCustomer\", \n      bgColor: \"bg-green-100\",\n      iconColor: \"text-success\",\n    },\n    {\n      icon: CalendarDays,\n      label: \"Schedule Delivery\",\n      action: \"scheduleDelivery\",\n      bgColor: \"bg-purple-100\",\n      iconColor: \"text-secondary\",\n    },\n    {\n      icon: Download,\n      label: \"Generate Report\",\n      action: \"generateReport\",\n      bgColor: \"bg-amber-100\",\n      iconColor: \"text-warning\",\n    },\n  ];\n\n  const upcomingDeliveries = deliveries?.slice(0, 3) || [];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h1 className=\"text-3xl font-bold text-gray-900\">Dashboard Overview</h1>\n            <div className=\"flex space-x-2\">\n              <Select defaultValue=\"7days\">\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"7days\">Last 7 days</SelectItem>\n                  <SelectItem value=\"30days\">Last 30 days</SelectItem>\n                  <SelectItem value=\"90days\">Last 90 days</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button>\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Report\n              </Button>\n            </div>\n          </div>\n\n          {/* Metrics Cards */}\n          <MetricsCards metrics={metrics} />\n        </div>\n\n        {/* Two Column Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Left Column - Recent Activity & Product Catalog */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            <RecentOrders />\n            <ProductGrid showHeader />\n          </div>\n\n          {/* Right Column - Quick Actions & Notifications */}\n          <div className=\"space-y-6\">\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {quickActions.map((action, index) => (\n                  <Button\n                    key={index}\n                    variant=\"ghost\"\n                    className=\"w-full justify-between p-3 h-auto\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div className={`p-2 ${action.bgColor} rounded-lg mr-3`}>\n                        <action.icon className={`h-4 w-4 ${action.iconColor}`} />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-900\">{action.label}</span>\n                    </div>\n                    <svg className=\"h-4 w-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 5l7 7-7 7\"></path>\n                    </svg>\n                  </Button>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Notifications Center */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Notifications</CardTitle>\n                <Button variant=\"ghost\" size=\"sm\">\n                  Mark All Read\n                </Button>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {notifications && notifications.length > 0 ? (\n                  notifications.slice(0, 3).map((notification) => (\n                    <div key={notification.id} className={`flex items-start space-x-3 p-3 border rounded-lg ${\n                      notification.type === 'warning' ? 'bg-yellow-50 border-yellow-200' :\n                      notification.type === 'success' ? 'bg-green-50 border-green-200' :\n                      'bg-blue-50 border-blue-200'\n                    }`}>\n                      <div className=\"flex-shrink-0\">\n                        <div className={`p-1 rounded-full ${\n                          notification.type === 'warning' ? 'bg-warning' :\n                          notification.type === 'success' ? 'bg-success' :\n                          'bg-primary'\n                        }`}>\n                          <Bell className=\"h-4 w-4 text-white\" />\n                        </div>\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-gray-900\">{notification.title}</p>\n                        <p className=\"text-sm text-gray-600\">{notification.message}</p>\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          {new Date(notification.createdAt).toLocaleTimeString()}\n                        </p>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-6\">\n                    <Bell className=\"mx-auto h-8 w-8 text-gray-400\" />\n                    <p className=\"mt-2 text-sm text-gray-500\">No new notifications</p>\n                  </div>\n                )}\n                <Button variant=\"ghost\" className=\"w-full\">\n                  View All Notifications\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Upcoming Deliveries */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Upcoming Deliveries</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {upcomingDeliveries.length > 0 ? (\n                  upcomingDeliveries.map((delivery) => (\n                    <div key={delivery.id} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"p-2 bg-blue-100 rounded-lg\">\n                          <CalendarDays className=\"h-4 w-4 text-primary\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">Order #{delivery.orderId.slice(-6)}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            {new Date(delivery.scheduledDate).toLocaleDateString()} at {delivery.scheduledTime}\n                          </p>\n                        </div>\n                      </div>\n                      <Badge className={`status-${delivery.type}`}>\n                        {delivery.type}\n                      </Badge>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-6\">\n                    <CalendarDays className=\"mx-auto h-8 w-8 text-gray-400\" />\n                    <p className=\"mt-2 text-sm text-gray-500\">No scheduled deliveries</p>\n                  </div>\n                )}\n                <Button variant=\"ghost\" className=\"w-full\">\n                  View Full Schedule\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Delivery Management Section */}\n        <DeliveryScheduler />\n      </div>\n    </div>\n  );\n}\n","size_bytes":8883},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/orders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { OrderStatus } from \"@/components/orders/order-status\";\nimport { Plus, Search, Eye } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport type { OrderWithDetails } from \"@shared/schema\";\n\nexport default function Orders() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedStatus, setSelectedStatus] = useState(\"\");\n\n  const { data: orders, isLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n    queryFn: () => api.getOrders(),\n  });\n\n  const filteredOrders = orders?.filter(order => {\n    const matchesSearch = order.orderNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.customer.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.customer.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.customer.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = !selectedStatus || order.status === selectedStatus;\n    return matchesSearch && matchesStatus;\n  });\n\n  const formatCurrency = (amount: string) => {\n    return `$${parseFloat(amount).toLocaleString()}`;\n  };\n\n  const formatDateRange = (startDate: string, endDate: string) => {\n    const start = new Date(startDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const end = new Date(endDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    return `${start} - ${end}`;\n  };\n\n  const calculateDuration = (startDate: string, endDate: string) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return `${diffDays} Day${diffDays !== 1 ? 's' : ''}`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <NavigationHeader />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4 sm:mb-0\">Orders</h1>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Order\n            </Button>\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search orders, customers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                <SelectItem value=\"delivered\">Delivered</SelectItem>\n                <SelectItem value=\"returned\">Returned</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Orders Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>All Orders</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Order ID\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Customer\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Items\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Duration\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Total\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {filteredOrders && filteredOrders.length > 0 ? (\n                    filteredOrders.map((order) => (\n                      <tr key={order.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className=\"text-sm font-medium text-gray-900\">\n                            {order.orderNumber}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center\">\n                            <div className=\"h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center\">\n                              <span className=\"text-xs font-medium text-gray-600\">\n                                {order.customer.firstName[0]}{order.customer.lastName[0]}\n                              </span>\n                            </div>\n                            <div className=\"ml-3\">\n                              <p className=\"text-sm font-medium text-gray-900\">\n                                {order.customer.firstName} {order.customer.lastName}\n                              </p>\n                              <p className=\"text-sm text-gray-500\">{order.customer.email}</p>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <div className=\"text-sm text-gray-900\">\n                            {order.items.length} Item{order.items.length !== 1 ? 's' : ''}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {order.items.slice(0, 2).map(item => item.product.name).join(', ')}\n                            {order.items.length > 2 && `, +${order.items.length - 2} more`}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-gray-900\">\n                            {calculateDuration(order.startDate, order.endDate)}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {formatDateRange(order.startDate, order.endDate)}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className=\"text-sm font-semibold text-gray-900\">\n                            {formatCurrency(order.totalAmount)}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <OrderStatus status={order.status} />\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            View\n                          </Button>\n                        </td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan={7} className=\"px-6 py-8 text-center\">\n                        <div className=\"text-gray-500\">\n                          {searchTerm || selectedStatus ? \"No orders match your filters\" : \"No orders found\"}\n                        </div>\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Pagination */}\n            {filteredOrders && filteredOrders.length > 0 && (\n              <div className=\"mt-6 flex items-center justify-between\">\n                <p className=\"text-sm text-gray-700\">\n                  Showing <span className=\"font-medium\">1</span> to{' '}\n                  <span className=\"font-medium\">{Math.min(10, filteredOrders.length)}</span> of{' '}\n                  <span className=\"font-medium\">{filteredOrders.length}</span> orders\n                </p>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Previous\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"bg-primary text-white\">\n                    1\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Next\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10842},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { ProductGrid } from \"@/components/products/product-grid\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Search } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\n\nexport default function Products() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [selectedStatus, setSelectedStatus] = useState(\"\");\n\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/categories\"],\n    queryFn: () => api.getCategories(),\n  });\n\n  const { data: products } = useQuery({\n    queryKey: [\"/api/products\", selectedCategory],\n    queryFn: () => api.getProducts(selectedCategory || undefined),\n  });\n\n  const filteredProducts = products?.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = !selectedStatus || product.status === selectedStatus;\n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4 sm:mb-0\">Equipment Catalog</h1>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Product\n            </Button>\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search products...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Categories</SelectItem>\n                {categories?.map((category) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Status</SelectItem>\n                <SelectItem value=\"available\">Available</SelectItem>\n                <SelectItem value=\"rented\">Rented</SelectItem>\n                <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Products Grid */}\n        <ProductGrid products={filteredProducts} />\n\n        {/* Statistics */}\n        {filteredProducts && (\n          <div className=\"mt-8 text-center text-sm text-gray-600\">\n            Showing {filteredProducts.length} of {products?.length || 0} products\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3937},"client/src/components/booking/booking-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calendar as CalendarIcon, User, ShoppingCart, CreditCard } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\ninterface BookingItem {\n  productId: string;\n  product: any;\n  quantity: number;\n  dailyRate: string;\n}\n\ninterface BookingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  selectedItems: BookingItem[];\n  onCreateOrder: (orderData: any) => void;\n  isLoading?: boolean;\n}\n\nexport function BookingModal({ isOpen, onClose, selectedItems, onCreateOrder, isLoading }: BookingModalProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [customerData, setCustomerData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n  });\n  const [rentalDates, setRentalDates] = useState({\n    startDate: undefined as Date | undefined,\n    endDate: undefined as Date | undefined,\n  });\n  const [notes, setNotes] = useState(\"\");\n\n  const steps = [\n    { number: 1, title: \"Customer Info\", icon: User },\n    { number: 2, title: \"Select Items\", icon: ShoppingCart },\n    { number: 3, title: \"Dates & Notes\", icon: CalendarIcon },\n    { number: 4, title: \"Review & Confirm\", icon: CreditCard },\n  ];\n\n  const calculateDays = () => {\n    if (!rentalDates.startDate || !rentalDates.endDate) return 1;\n    const diffTime = Math.abs(rentalDates.endDate.getTime() - rentalDates.startDate.getTime());\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24)) || 1;\n  };\n\n  const calculateTotal = () => {\n    const days = calculateDays();\n    return selectedItems.reduce((total, item) => {\n      return total + (parseFloat(item.dailyRate) * item.quantity * days);\n    }, 0);\n  };\n\n  const calculateSecurityDeposit = () => {\n    return selectedItems.reduce((total, item) => {\n      const deposit = parseFloat(item.product.securityDeposit || \"0\");\n      return total + (deposit * item.quantity);\n    }, 0);\n  };\n\n  const handleNextStep = () => {\n    if (currentStep < 4) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!rentalDates.startDate || !rentalDates.endDate) return;\n\n    const days = calculateDays();\n    const totalAmount = calculateTotal();\n    const securityDeposit = calculateSecurityDeposit();\n\n    const orderData = {\n      customerId: \"temp-customer-id\", // This would be resolved by creating/finding customer\n      startDate: rentalDates.startDate.toISOString(),\n      endDate: rentalDates.endDate.toISOString(),\n      totalAmount: totalAmount.toString(),\n      securityDeposit: securityDeposit.toString(),\n      notes,\n      customer: customerData,\n      days,\n    };\n\n    onCreateOrder(orderData);\n  };\n\n  const isStepValid = (step: number) => {\n    switch (step) {\n      case 1:\n        return customerData.firstName && customerData.lastName && customerData.email;\n      case 2:\n        return selectedItems.length > 0;\n      case 3:\n        return rentalDates.startDate && rentalDates.endDate;\n      default:\n        return true;\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create New Booking</DialogTitle>\n        </DialogHeader>\n\n        {/* Step Progress Indicator */}\n        <div className=\"flex items-center justify-center mb-8\">\n          {steps.map((step, index) => (\n            <div key={step.number} className=\"flex items-center\">\n              <div className=\"flex items-center\">\n                <div className={`flex items-center justify-center w-8 h-8 rounded-full text-sm font-semibold ${\n                  currentStep >= step.number \n                    ? \"bg-primary text-white\" \n                    : \"bg-gray-200 text-gray-500\"\n                }`}>\n                  {step.number}\n                </div>\n                <span className={`ml-2 text-sm font-medium ${\n                  currentStep >= step.number ? \"text-primary\" : \"text-gray-500\"\n                }`}>\n                  {step.title}\n                </span>\n              </div>\n              {index < steps.length - 1 && (\n                <div className={`w-16 h-1 mx-4 ${\n                  currentStep > step.number ? \"bg-primary\" : \"bg-gray-200\"\n                }`} />\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Step Content */}\n        <div className=\"min-h-[400px]\">\n          {currentStep === 1 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold mb-4\">Customer Information</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name *</Label>\n                  <Input\n                    id=\"firstName\"\n                    value={customerData.firstName}\n                    onChange={(e) => setCustomerData({ ...customerData, firstName: e.target.value })}\n                    placeholder=\"Enter first name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name *</Label>\n                  <Input\n                    id=\"lastName\"\n                    value={customerData.lastName}\n                    onChange={(e) => setCustomerData({ ...customerData, lastName: e.target.value })}\n                    placeholder=\"Enter last name\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"email\">Email Address *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={customerData.email}\n                  onChange={(e) => setCustomerData({ ...customerData, email: e.target.value })}\n                  placeholder=\"customer@example.com\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"phone\">Phone Number</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={customerData.phone}\n                  onChange={(e) => setCustomerData({ ...customerData, phone: e.target.value })}\n                  placeholder=\"+1 (555) 000-0000\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"address\">Delivery Address</Label>\n                <Textarea\n                  id=\"address\"\n                  value={customerData.address}\n                  onChange={(e) => setCustomerData({ ...customerData, address: e.target.value })}\n                  placeholder=\"Enter complete delivery address\"\n                  rows={3}\n                />\n              </div>\n            </div>\n          )}\n\n          {currentStep === 2 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold mb-4\">Selected Items</h3>\n              <div className=\"space-y-4\">\n                {selectedItems.map((item) => (\n                  <div key={item.productId} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      <img \n                        src={item.product.imageUrl || 'https://images.unsplash.com/photo-1502920917128-1aa500764cbd?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150'}\n                        alt={item.product.name}\n                        className=\"w-16 h-16 object-cover rounded-lg\"\n                      />\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900\">{item.product.name}</h4>\n                        <p className=\"text-sm text-gray-500\">{item.product.category?.name}</p>\n                        <p className=\"text-sm font-medium text-primary\">${item.dailyRate}/day</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-lg font-semibold text-gray-900\">×{item.quantity}</div>\n                      <div className=\"text-sm text-gray-500\">\n                        ${(parseFloat(item.dailyRate) * item.quantity).toFixed(2)}/day\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {currentStep === 3 && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Rental Dates & Notes</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label>Start Date *</Label>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        className={cn(\n                          \"w-full justify-start text-left font-normal\",\n                          !rentalDates.startDate && \"text-muted-foreground\"\n                        )}\n                      >\n                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                        {rentalDates.startDate ? format(rentalDates.startDate, \"PPP\") : \"Pick start date\"}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={rentalDates.startDate}\n                        onSelect={(date) => setRentalDates({ ...rentalDates, startDate: date })}\n                        disabled={(date) => date < new Date()}\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n                </div>\n                <div>\n                  <Label>End Date *</Label>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        className={cn(\n                          \"w-full justify-start text-left font-normal\",\n                          !rentalDates.endDate && \"text-muted-foreground\"\n                        )}\n                      >\n                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                        {rentalDates.endDate ? format(rentalDates.endDate, \"PPP\") : \"Pick end date\"}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={rentalDates.endDate}\n                        onSelect={(date) => setRentalDates({ ...rentalDates, endDate: date })}\n                        disabled={(date) => date < (rentalDates.startDate || new Date())}\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"notes\">Additional Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={notes}\n                  onChange={(e) => setNotes(e.target.value)}\n                  placeholder=\"Any special instructions or requirements...\"\n                  rows={4}\n                />\n              </div>\n\n              {rentalDates.startDate && rentalDates.endDate && (\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-blue-900 mb-2\">Rental Summary</h4>\n                  <div className=\"text-sm text-blue-700\">\n                    <div className=\"flex justify-between\">\n                      <span>Duration:</span>\n                      <span>{calculateDays()} day{calculateDays() !== 1 ? 's' : ''}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Items:</span>\n                      <span>{selectedItems.reduce((sum, item) => sum + item.quantity, 0)}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {currentStep === 4 && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Review & Confirm</h3>\n              \n              {/* Customer Summary */}\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Customer Information</h4>\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <div className=\"text-sm text-gray-700\">\n                    <div>{customerData.firstName} {customerData.lastName}</div>\n                    <div>{customerData.email}</div>\n                    {customerData.phone && <div>{customerData.phone}</div>}\n                    {customerData.address && <div className=\"mt-2\">{customerData.address}</div>}\n                  </div>\n                </div>\n              </div>\n\n              {/* Rental Summary */}\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Rental Details</h4>\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <div className=\"text-sm text-gray-700\">\n                    <div className=\"flex justify-between\">\n                      <span>Period:</span>\n                      <span>\n                        {rentalDates.startDate && format(rentalDates.startDate, \"MMM dd\")} - {\" \"}\n                        {rentalDates.endDate && format(rentalDates.endDate, \"MMM dd, yyyy\")}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Duration:</span>\n                      <span>{calculateDays()} day{calculateDays() !== 1 ? 's' : ''}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Items Summary */}\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Items ({selectedItems.length})</h4>\n                <div className=\"space-y-2\">\n                  {selectedItems.map((item) => (\n                    <div key={item.productId} className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                      <div>\n                        <span className=\"font-medium\">{item.product.name}</span>\n                        <span className=\"text-gray-500 ml-2\">×{item.quantity}</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <div>${(parseFloat(item.dailyRate) * item.quantity * calculateDays()).toFixed(2)}</div>\n                        <div className=\"text-xs text-gray-500\">\n                          ${item.dailyRate}/day × {item.quantity} × {calculateDays()} days\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Pricing Summary */}\n              <Separator />\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal:</span>\n                  <span>${calculateTotal().toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Security Deposit:</span>\n                  <span>${calculateSecurityDeposit().toFixed(2)}</span>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between text-lg font-semibold\">\n                  <span>Total Amount:</span>\n                  <span>${(calculateTotal() + calculateSecurityDeposit()).toFixed(2)}</span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Navigation Buttons */}\n        <div className=\"flex justify-between pt-6 border-t\">\n          <div>\n            {currentStep > 1 && (\n              <Button variant=\"outline\" onClick={handlePrevStep}>\n                Previous\n              </Button>\n            )}\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            {currentStep < 4 ? (\n              <Button \n                onClick={handleNextStep}\n                disabled={!isStepValid(currentStep)}\n              >\n                Next Step\n              </Button>\n            ) : (\n              <Button \n                onClick={handleSubmit}\n                disabled={isLoading || !isStepValid(currentStep)}\n              >\n                {isLoading ? \"Creating Order...\" : \"Create Order\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":17471},"client/src/components/dashboard/metrics-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { TrendingUp, ShoppingBag, Users, BarChart3 } from \"lucide-react\";\nimport type { DashboardMetrics } from \"@shared/schema\";\n\ninterface MetricsCardsProps {\n  metrics?: DashboardMetrics;\n}\n\nexport function MetricsCards({ metrics }: MetricsCardsProps) {\n  const cards = [\n    {\n      title: \"Total Revenue\",\n      value: metrics ? `$${metrics.totalRevenue.toLocaleString()}` : \"$0\",\n      change: \"+12.5% from last month\",\n      changeType: \"positive\" as const,\n      icon: TrendingUp,\n      bgColor: \"bg-green-100\",\n      iconColor: \"text-success\",\n    },\n    {\n      title: \"Active Rentals\",\n      value: metrics?.activeRentals.toString() || \"0\",\n      change: \"+8 pending returns\",\n      changeType: \"neutral\" as const,\n      icon: ShoppingBag,\n      bgColor: \"bg-blue-100\",\n      iconColor: \"text-primary\",\n    },\n    {\n      title: \"New Customers\",\n      value: metrics?.newCustomers.toString() || \"0\",\n      change: \"+15.2% from last week\",\n      changeType: \"positive\" as const,\n      icon: Users,\n      bgColor: \"bg-purple-100\",\n      iconColor: \"text-secondary\",\n    },\n    {\n      title: \"Inventory Utilization\",\n      value: metrics ? `${metrics.inventoryUtilization}%` : \"0%\",\n      change: \"Available capacity\",\n      changeType: \"neutral\" as const,\n      icon: BarChart3,\n      bgColor: \"bg-amber-100\",\n      iconColor: \"text-warning\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {cards.map((card, index) => (\n        <Card key={index} className=\"border border-gray-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">{card.title}</p>\n                <p className=\"text-3xl font-bold text-gray-900\">{card.value}</p>\n                <p className={`text-sm ${\n                  card.changeType === \"positive\" ? \"text-success\" : \n                  card.changeType === \"negative\" ? \"text-destructive\" : \n                  \"text-gray-500\"\n                }`}>\n                  {card.change}\n                </p>\n              </div>\n              <div className={`p-3 ${card.bgColor} rounded-lg`}>\n                <card.icon className={`h-6 w-6 ${card.iconColor}`} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2457},"client/src/components/dashboard/recent-orders.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Eye, Plus } from \"lucide-react\";\nimport { OrderStatus } from \"@/components/orders/order-status\";\nimport { api } from \"@/lib/api\";\nimport { Link } from \"wouter\";\n\nexport function RecentOrders() {\n  const { data: orders, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/recent-orders\"],\n    queryFn: () => api.getRecentOrders(5),\n  });\n\n  const formatCurrency = (amount: string) => {\n    return `$${parseFloat(amount).toLocaleString()}`;\n  };\n\n  const formatDateRange = (startDate: string, endDate: string) => {\n    const start = new Date(startDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const end = new Date(endDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    return `${start} - ${end}`;\n  };\n\n  const calculateDuration = (startDate: string, endDate: string) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return `${diffDays} Day${diffDays !== 1 ? 's' : ''}`;\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Recent Orders</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Link href=\"/orders\">\n              <Button variant=\"ghost\" size=\"sm\">\n                View All\n              </Button>\n            </Link>\n            <Link href=\"/booking\">\n              <Button size=\"sm\">\n                <Plus className=\"w-4 h-4 mr-1\" />\n                New Order\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"flex items-center space-x-4\">\n                <Skeleton className=\"h-10 w-10 rounded-full\" />\n                <div className=\"space-y-2 flex-1\">\n                  <Skeleton className=\"h-4 w-[250px]\" />\n                  <Skeleton className=\"h-4 w-[200px]\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Order ID\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Customer\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Items\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Duration\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Total\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {orders && orders.length > 0 ? (\n                  orders.map((order) => (\n                    <tr key={order.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className=\"text-sm font-medium text-gray-900\">\n                          {order.orderNumber}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          <div className=\"h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center\">\n                            <span className=\"text-xs font-medium text-gray-600\">\n                              {order.customer.firstName[0]}{order.customer.lastName[0]}\n                            </span>\n                          </div>\n                          <div className=\"ml-3\">\n                            <p className=\"text-sm font-medium text-gray-900\">\n                              {order.customer.firstName} {order.customer.lastName}\n                            </p>\n                            <p className=\"text-sm text-gray-500\">{order.customer.email}</p>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        <div className=\"text-sm text-gray-900\">\n                          {order.items.length} Item{order.items.length !== 1 ? 's' : ''}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {order.items.slice(0, 2).map(item => item.product.name).join(', ')}\n                          {order.items.length > 2 && `, +${order.items.length - 2} more`}\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm text-gray-900\">\n                          {calculateDuration(order.startDate, order.endDate)}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {formatDateRange(order.startDate, order.endDate)}\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className=\"text-sm font-semibold text-gray-900\">\n                          {formatCurrency(order.totalAmount)}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <OrderStatus status={order.status} />\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"w-4 h-4 mr-1\" />\n                          View\n                        </Button>\n                      </td>\n                    </tr>\n                  ))\n                ) : (\n                  <tr>\n                    <td colSpan={7} className=\"px-6 py-8 text-center\">\n                      <div className=\"text-gray-500\">No recent orders found</div>\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7375},"client/src/components/delivery/delivery-scheduler.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CalendarDays, Truck, User, MapPin } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\n\nexport function DeliveryScheduler() {\n  const { data: deliveries } = useQuery({\n    queryKey: [\"/api/deliveries\"],\n    queryFn: () => api.getDeliveries(),\n  });\n\n  const { data: orders } = useQuery({\n    queryKey: [\"/api/orders\"],\n    queryFn: () => api.getOrders(),\n  });\n\n  // Mock driver data for demonstration\n  const drivers = [\n    { id: \"1\", name: \"John Smith\", initials: \"JS\", activeRoutes: 3 },\n    { id: \"2\", name: \"Mike Johnson\", initials: \"MJ\", activeRoutes: 2 },\n    { id: \"3\", name: \"Sarah Wilson\", initials: \"SW\", activeRoutes: 1 },\n  ];\n\n  const todaysDeliveries = deliveries?.filter(delivery => {\n    const today = new Date();\n    const deliveryDate = new Date(delivery.scheduledDate);\n    return deliveryDate.toDateString() === today.toDateString();\n  }) || [];\n\n  // Group deliveries by driver (mock grouping)\n  const deliveriesByDriver = todaysDeliveries.reduce((acc, delivery) => {\n    const driverName = delivery.driverName || \"Unassigned\";\n    if (!acc[driverName]) {\n      acc[driverName] = [];\n    }\n    acc[driverName].push(delivery);\n    return acc;\n  }, {} as Record<string, typeof todaysDeliveries>);\n\n  const formatTime = (time: string) => {\n    return time; // Assuming time is already formatted\n  };\n\n  const formatAddress = (address: string) => {\n    return address.length > 30 ? address.substring(0, 30) + \"...\" : address;\n  };\n\n  const getDeliveryTypeColor = (type: string) => {\n    switch (type) {\n      case 'pickup':\n        return 'bg-blue-100 text-blue-800';\n      case 'return':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Generate weekly calendar dates\n  const getWeekDates = () => {\n    const today = new Date();\n    const week = [];\n    const startOfWeek = new Date(today);\n    startOfWeek.setDate(today.getDate() - today.getDay() + 1); // Start from Monday\n\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startOfWeek);\n      date.setDate(startOfWeek.getDate() + i);\n      week.push(date);\n    }\n    return week;\n  };\n\n  const weekDates = getWeekDates();\n  const today = new Date();\n\n  return (\n    <div className=\"mt-8\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Delivery Management</CardTitle>\n            <div className=\"flex space-x-2\">\n              <Select defaultValue=\"all\">\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Drivers</SelectItem>\n                  {drivers.map((driver) => (\n                    <SelectItem key={driver.id} value={driver.id}>\n                      {driver.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Button>\n                <CalendarDays className=\"w-4 h-4 mr-2\" />\n                Schedule Delivery\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Weekly Calendar View */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Weekly Overview</h3>\n            <div className=\"grid grid-cols-7 gap-4 mb-6\">\n              {weekDates.map((date, index) => {\n                const isToday = date.toDateString() === today.toDateString();\n                const dayNames = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n                \n                return (\n                  <div key={index} className=\"text-center\">\n                    <div className=\"text-sm font-medium text-gray-500 mb-2\">\n                      {dayNames[index]}\n                    </div>\n                    <div className={`text-lg font-semibold ${\n                      isToday \n                        ? \"text-primary bg-blue-100 rounded-lg py-1\" \n                        : \"text-gray-900\"\n                    }`}>\n                      {date.getDate()}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Today's Routes */}\n          <div className=\"space-y-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Today's Routes</h3>\n            \n            {Object.keys(deliveriesByDriver).length > 0 ? (\n              Object.entries(deliveriesByDriver).map(([driverName, driverDeliveries]) => {\n                const driver = drivers.find(d => d.name === driverName) || {\n                  name: driverName,\n                  initials: driverName.split(' ').map(n => n[0]).join(''),\n                  activeRoutes: driverDeliveries.length\n                };\n\n                return (\n                  <div key={driverName} className=\"border border-gray-200 rounded-lg p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                          <span className=\"text-white font-semibold text-sm\">\n                            {driver.initials}\n                          </span>\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-gray-900\">{driver.name}</p>\n                          <p className=\"text-sm text-gray-500\">\n                            {driverDeliveries.length} deliveries scheduled\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Truck className=\"w-4 h-4 mr-1\" />\n                          Track Route\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                      {driverDeliveries.map((delivery) => {\n                        const order = orders?.find(o => o.id === delivery.orderId);\n                        \n                        return (\n                          <div key={delivery.id} className=\"bg-gray-50 rounded-lg p-3\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <p className=\"text-sm font-medium text-gray-900\">\n                                {formatTime(delivery.scheduledTime)} - {delivery.type}\n                              </p>\n                              <Badge className={getDeliveryTypeColor(delivery.type)}>\n                                {delivery.type}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-gray-600\">\n                              #{order?.orderNumber || delivery.orderId.slice(-6)}\n                            </p>\n                            <div className=\"flex items-center text-xs text-gray-500 mt-1\">\n                              <MapPin className=\"w-3 h-3 mr-1\" />\n                              {formatAddress(delivery.address)}\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                );\n              })\n            ) : (\n              <div className=\"text-center py-12\">\n                <CalendarDays className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Deliveries Scheduled</h3>\n                <p className=\"text-gray-500 mb-4\">No deliveries are scheduled for today.</p>\n                <Button>\n                  <CalendarDays className=\"w-4 h-4 mr-2\" />\n                  Schedule First Delivery\n                </Button>\n              </div>\n            )}\n          </div>\n\n          {/* Driver Performance Summary */}\n          {drivers.length > 0 && (\n            <div className=\"mt-8\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Driver Overview</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {drivers.map((driver) => (\n                  <div key={driver.id} className=\"bg-gray-50 rounded-lg p-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                        <span className=\"text-white font-semibold text-xs\">\n                          {driver.initials}\n                        </span>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-900\">{driver.name}</p>\n                        <p className=\"text-sm text-gray-500\">\n                          {driver.activeRoutes} active route{driver.activeRoutes !== 1 ? 's' : ''}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9785},"client/src/components/orders/order-status.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\n\ninterface OrderStatusProps {\n  status: string;\n}\n\nexport function OrderStatus({ status }: OrderStatusProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'status-pending';\n      case 'confirmed':\n        return 'status-confirmed';\n      case 'delivered':\n        return 'status-delivered';\n      case 'returned':\n        return 'status-returned';\n      case 'cancelled':\n        return 'status-cancelled';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    return status.charAt(0).toUpperCase() + status.slice(1);\n  };\n\n  return (\n    <Badge className={getStatusColor(status)}>\n      {getStatusText(status)}\n    </Badge>\n  );\n}\n","size_bytes":808},"client/src/components/payments/razorpay-payment.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface RazorpayPaymentProps {\n  amount: number;\n  orderId?: string;\n  orderNumber?: string;\n  customerEmail?: string;\n  customerPhone?: string;\n  customerName?: string;\n  onSuccess?: (paymentId: string) => void;\n  onError?: (error: string) => void;\n}\n\ndeclare global {\n  interface Window {\n    Razorpay: any;\n  }\n}\n\nexport function RazorpayPayment({\n  amount,\n  orderId,\n  orderNumber,\n  customerEmail,\n  customerPhone,\n  customerName,\n  onSuccess,\n  onError,\n}: RazorpayPaymentProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const loadRazorpayScript = () => {\n    return new Promise((resolve) => {\n      const script = document.createElement(\"script\");\n      script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n      script.onload = () => resolve(true);\n      script.onerror = () => resolve(false);\n      document.body.appendChild(script);\n    });\n  };\n\n  const handlePayment = async () => {\n    setIsLoading(true);\n    \n    try {\n      // Load Razorpay script\n      const isScriptLoaded = await loadRazorpayScript();\n      if (!isScriptLoaded) {\n        throw new Error(\"Failed to load Razorpay script\");\n      }\n\n      // Create Razorpay order\n      const orderResponse = await apiRequest(\"POST\", \"/api/razorpay/create-order\", {\n        amount,\n        currency: \"INR\",\n        receipt: orderNumber || `receipt_${Date.now()}`,\n        notes: {\n          order_id: orderId || \"\",\n          customer_email: customerEmail || \"\",\n        },\n      });\n\n      const razorpayOrder = await orderResponse.json();\n\n      // Configure Razorpay options\n      const options = {\n        key: import.meta.env.VITE_RAZORPAY_KEY_ID,\n        amount: razorpayOrder.amount,\n        currency: razorpayOrder.currency,\n        name: \"RentPro - Equipment Rental\",\n        description: orderNumber ? `Payment for Order ${orderNumber}` : \"Equipment Rental Payment\",\n        order_id: razorpayOrder.id,\n        prefill: {\n          name: customerName || \"\",\n          email: customerEmail || \"\",\n          contact: customerPhone || \"\",\n        },\n        theme: {\n          color: \"#3B82F6\",\n        },\n        handler: async (response: any) => {\n          try {\n            // Verify payment on backend\n            const verifyResponse = await apiRequest(\"POST\", \"/api/razorpay/verify-payment\", {\n              razorpay_order_id: response.razorpay_order_id,\n              razorpay_payment_id: response.razorpay_payment_id,\n              razorpay_signature: response.razorpay_signature,\n              order_id: orderId,\n            });\n\n            const verifyResult = await verifyResponse.json();\n\n            if (verifyResult.success) {\n              toast({\n                title: \"Payment Successful\",\n                description: \"Your payment has been processed successfully.\",\n              });\n              onSuccess?.(response.razorpay_payment_id);\n            } else {\n              throw new Error(verifyResult.message || \"Payment verification failed\");\n            }\n          } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Payment verification failed\";\n            toast({\n              title: \"Payment Verification Failed\",\n              description: errorMessage,\n              variant: \"destructive\",\n            });\n            onError?.(errorMessage);\n          }\n        },\n        modal: {\n          ondismiss: () => {\n            setIsLoading(false);\n            toast({\n              title: \"Payment Cancelled\",\n              description: \"You cancelled the payment process.\",\n              variant: \"destructive\",\n            });\n          },\n        },\n      };\n\n      // Open Razorpay checkout\n      const razorpay = new window.Razorpay(options);\n      razorpay.open();\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : \"Failed to initialize payment\";\n      toast({\n        title: \"Payment Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      onError?.(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"text-center\">Payment Details</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"text-center\">\n          <p className=\"text-2xl font-bold\">₹{amount.toLocaleString()}</p>\n          {orderNumber && (\n            <p className=\"text-sm text-gray-600\">Order: {orderNumber}</p>\n          )}\n        </div>\n        \n        <Button\n          onClick={handlePayment}\n          disabled={isLoading}\n          className=\"w-full\"\n          size=\"lg\"\n        >\n          {isLoading ? \"Processing...\" : \"Pay with Razorpay\"}\n        </Button>\n        \n        <div className=\"text-xs text-gray-500 text-center\">\n          Secure payment powered by Razorpay\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5222},"client/src/components/products/product-grid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Eye, Plus, ShoppingCart } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport type { ProductWithCategory } from \"@shared/schema\";\n\ninterface ProductGridProps {\n  products?: ProductWithCategory[];\n  showHeader?: boolean;\n  onAddToCart?: (product: ProductWithCategory) => void;\n  showAddToCart?: boolean;\n}\n\nexport function ProductGrid({ products, showHeader = false, onAddToCart, showAddToCart = false }: ProductGridProps) {\n  const { data: fetchedProducts, isLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: () => api.getProducts(),\n    enabled: !products,\n  });\n\n  const displayProducts = products || fetchedProducts;\n\n  const formatCurrency = (amount: string) => {\n    return `$${parseFloat(amount).toFixed(0)}`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'available':\n        return 'status-available';\n      case 'rented':\n        return 'status-rented';\n      case 'maintenance':\n        return 'status-maintenance';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    return status.charAt(0).toUpperCase() + status.slice(1);\n  };\n\n  if (isLoading && !products) {\n    return (\n      <Card>\n        {showHeader && (\n          <CardHeader>\n            <CardTitle>Equipment Catalog</CardTitle>\n          </CardHeader>\n        )}\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <div key={i} className=\"border border-gray-200 rounded-lg overflow-hidden\">\n                <Skeleton className=\"w-full h-48\" />\n                <div className=\"p-4\">\n                  <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                  <Skeleton className=\"h-4 w-1/2 mb-4\" />\n                  <div className=\"flex items-center justify-between\">\n                    <Skeleton className=\"h-4 w-1/3\" />\n                    <Skeleton className=\"h-8 w-20\" />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      {showHeader && (\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <CardTitle>Equipment Catalog</CardTitle>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Product\n            </Button>\n          </div>\n        </CardHeader>\n      )}\n      <CardContent>\n        {displayProducts && displayProducts.length > 0 ? (\n          <>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {displayProducts.map((product) => (\n                <div key={product.id} className=\"border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow\">\n                  <img \n                    src={product.imageUrl || 'https://images.unsplash.com/photo-1502920917128-1aa500764cbd?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600'}\n                    alt={product.name}\n                    className=\"w-full h-48 object-cover\"\n                  />\n                  <div className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-gray-900 truncate\">{product.name}</h3>\n                        <p className=\"text-sm text-gray-500 truncate\">\n                          {product.category?.name || 'Uncategorized'}\n                        </p>\n                      </div>\n                      <Badge className={`ml-2 ${getStatusColor(product.status)}`}>\n                        {getStatusText(product.status)}\n                      </Badge>\n                    </div>\n                    \n                    {product.description && (\n                      <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n                        {product.description}\n                      </p>\n                    )}\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-sm text-gray-600\">\n                        <span className=\"font-semibold text-gray-900\">\n                          {formatCurrency(product.dailyRate)}/day\n                        </span>\n                        {product.availableQuantity !== product.quantity && (\n                          <div className=\"text-xs text-gray-500 mt-1\">\n                            {product.availableQuantity} of {product.quantity} available\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        {showAddToCart && onAddToCart && product.availableQuantity > 0 && (\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => onAddToCart(product)}\n                          >\n                            <ShoppingCart className=\"w-4 h-4 mr-1\" />\n                            Add\n                          </Button>\n                        )}\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\"\n                          disabled={product.status === 'maintenance'}\n                        >\n                          <Eye className=\"w-4 h-4 mr-1\" />\n                          View\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {showHeader && displayProducts.length >= 6 && (\n              <div className=\"mt-6 flex items-center justify-between\">\n                <p className=\"text-sm text-gray-700\">\n                  Showing <span className=\"font-medium\">1</span> to{' '}\n                  <span className=\"font-medium\">{Math.min(6, displayProducts.length)}</span> of{' '}\n                  <span className=\"font-medium\">{displayProducts.length}</span> products\n                </p>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Previous\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"bg-primary text-white\">\n                    1\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    2\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    3\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Next\n                  </Button>\n                </div>\n              </div>\n            )}\n          </>\n        ) : (\n          <div className=\"text-center py-12\">\n            <div className=\"text-gray-500 mb-4\">No products found</div>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add First Product\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7504},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }","size_bytes":1418},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/data-table.tsx":{"content":"import { flexRender, Table as TanstackTable } from \"@tanstack/react-table\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface DataTableProps<TData> {\n  table: TanstackTable<TData>;\n  columns: any[];\n}\n\nexport function DataTable<TData>({ table, columns }: DataTableProps<TData>) {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <TableHead key={header.id} className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                  className=\"hover:bg-gray-50\"\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                  No results found.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      \n      {/* Pagination */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"text-sm text-gray-700\">\n          Showing {table.getState().pagination.pageIndex * table.getState().pagination.pageSize + 1} to{' '}\n          {Math.min(\n            (table.getState().pagination.pageIndex + 1) * table.getState().pagination.pageSize,\n            table.getFilteredRowModel().rows.length\n          )}{' '}\n          of {table.getFilteredRowModel().rows.length} results\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n            Previous\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            Next\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3233},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","size_bytes":7308},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport NavigationHeader from \"@/components/NavigationHeader\";\nimport { \n  Package, \n  Users, \n  TrendingUp, \n  CreditCard, \n  Bell,\n  Calendar,\n  ShoppingBag,\n  Settings,\n  BarChart3,\n  MapPin,\n  Clock,\n  AlertCircle\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { api } from \"@/lib/api\";\n\nexport default function AdminHome() {\n  const [, setLocation] = useLocation();\n\n  // Mock current user - replace with real authentication\n  const currentUser = {\n    firstName: \"Admin\",\n    lastName: \"User\", \n    email: \"admin@rentpro.com\",\n    profileImageUrl: undefined\n  };\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/metrics\"],\n    queryFn: () => api.getDashboardMetrics(),\n  });\n\n  const { data: orders, isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n    queryFn: () => api.getOrders(),\n  });\n\n  const { data: notifications } = useQuery({\n    queryKey: [\"/api/notifications\", \"admin\"],\n    queryFn: () => api.getNotifications(\"admin-id\"),\n  });\n\n  const pendingOrders = orders?.filter(order => order.status === \"pending\") || [];\n  const recentOrders = orders?.slice(0, 5) || [];\n\n  const quickActions = [\n    {\n      icon: Package,\n      label: \"Manage Products\",\n      description: \"Add or edit rental items\",\n      action: () => setLocation(\"/admin/products\"),\n      color: \"bg-blue-500\"\n    },\n    {\n      icon: ShoppingBag,\n      label: \"View Orders\",\n      description: \"Process customer orders\",\n      action: () => setLocation(\"/admin/orders\"),\n      color: \"bg-green-500\"\n    },\n    {\n      icon: Users,\n      label: \"Manage Customers\",\n      description: \"View customer accounts\",\n      action: () => setLocation(\"/admin/customers\"),\n      color: \"bg-purple-500\"\n    },\n    {\n      icon: BarChart3,\n      label: \"Analytics\",\n      description: \"View business insights\",\n      action: () => setLocation(\"/admin/dashboard\"),\n      color: \"bg-orange-500\"\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"confirmed\": return \"bg-blue-100 text-blue-800\";\n      case \"delivered\": return \"bg-green-100 text-green-800\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\";\n      case \"returned\": return \"bg-gray-100 text-gray-800\";\n      case \"cancelled\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader userType=\"admin\" currentUser={currentUser} />\n      \n      {/* Welcome Section */}\n      <div className=\"bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Admin Dashboard</h1>\n              <p className=\"text-gray-600 mt-1\">Welcome back, {currentUser.firstName}! Manage your rental business operations</p>\n            </div>\n            <div className=\"flex space-x-3\">\n              <Button variant=\"outline\" onClick={() => setLocation(\"/admin/products\")}>\n                <Package className=\"w-4 h-4 mr-2\" />\n                Manage Products\n              </Button>\n              <Button onClick={() => setLocation(\"/admin/orders\")}>\n                <ShoppingBag className=\"w-4 h-4 mr-2\" />\n                View Orders\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Metrics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <CreditCard className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <h3 className=\"text-sm font-medium text-gray-500\">Total Revenue</h3>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    ₹{metricsLoading ? \"...\" : metrics?.totalRevenue?.toLocaleString() || \"0\"}\n                  </p>\n                  <p className=\"text-xs text-green-600\">\n                    +12% from last month\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <ShoppingBag className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <h3 className=\"text-sm font-medium text-gray-500\">Total Orders</h3>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {ordersLoading ? \"...\" : orders?.length || 0}\n                  </p>\n                  <p className=\"text-xs text-green-600\">\n                    +18% from last month\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\n                  <Package className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <h3 className=\"text-sm font-medium text-gray-500\">Active Rentals</h3>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {metricsLoading ? \"...\" : metrics?.activeRentals || 0}\n                  </p>\n                  <p className=\"text-xs text-green-600\">\n                    +15% from last month\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\n                  <Users className=\"h-6 w-6 text-orange-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <h3 className=\"text-sm font-medium text-gray-500\">Total Customers</h3>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {metricsLoading ? \"...\" : \"247\"}\n                  </p>\n                  <p className=\"text-xs text-green-600\">\n                    +22% from last month\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Settings className=\"w-5 h-5 mr-2\" />\n              Quick Actions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {quickActions.map((action, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                  onClick={action.action}\n                >\n                  <div className={`p-2 rounded-lg ${action.color} text-white`}>\n                    <action.icon className=\"h-6 w-6\" />\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"font-medium\">{action.label}</p>\n                    <p className=\"text-sm text-gray-500\">{action.description}</p>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Pending Orders */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center\">\n                <AlertCircle className=\"w-5 h-5 mr-2 text-yellow-600\" />\n                Pending Orders\n                {pendingOrders.length > 0 && (\n                  <Badge className=\"ml-2 bg-yellow-100 text-yellow-800\">\n                    {pendingOrders.length}\n                  </Badge>\n                )}\n              </CardTitle>\n              {pendingOrders.length > 0 && (\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setLocation(\"/admin/orders\")}>\n                  View All\n                </Button>\n              )}\n            </CardHeader>\n            <CardContent>\n              {pendingOrders.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <ShoppingBag className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No pending orders</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    All orders are up to date. Great job!\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {pendingOrders.slice(0, 5).map((order) => (\n                    <div key={order.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium\">Order #{order.orderNumber}</h4>\n                        <Badge className={getStatusColor(order.status)}>\n                          {order.status}\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm text-gray-600 space-y-1\">\n                        <div className=\"flex items-center\">\n                          <Users className=\"w-4 h-4 mr-1\" />\n                          {order.customer?.firstName} {order.customer?.lastName}\n                        </div>\n                        <div className=\"flex items-center\">\n                          <CreditCard className=\"w-4 h-4 mr-1\" />\n                          ₹{parseFloat(order.totalAmount).toLocaleString()}\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"w-4 h-4 mr-1\" />\n                          {new Date(order.createdAt).toLocaleDateString()}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Recent Orders */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center\">\n                <Clock className=\"w-5 h-5 mr-2\" />\n                Recent Orders\n              </CardTitle>\n              {recentOrders.length > 0 && (\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setLocation(\"/admin/orders\")}>\n                  View All\n                </Button>\n              )}\n            </CardHeader>\n            <CardContent>\n              {ordersLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : recentOrders.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <ShoppingBag className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No orders yet</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    Orders will appear here once customers start renting.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {recentOrders.map((order) => (\n                    <div key={order.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium\">#{order.orderNumber}</h4>\n                        <Badge className={getStatusColor(order.status)}>\n                          {order.status}\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm text-gray-600 space-y-1\">\n                        <div className=\"flex items-center\">\n                          <Users className=\"w-4 h-4 mr-1\" />\n                          {order.customer?.firstName} {order.customer?.lastName}\n                        </div>\n                        <div className=\"flex items-center\">\n                          <CreditCard className=\"w-4 h-4 mr-1\" />\n                          ₹{parseFloat(order.totalAmount).toLocaleString()}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Notifications */}\n        {notifications && notifications.length > 0 && (\n          <Card className=\"mt-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Bell className=\"w-5 h-5 mr-2\" />\n                Recent Notifications\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {notifications.slice(0, 3).map((notification) => (\n                  <div key={notification.id} className=\"flex items-start space-x-3 p-3 bg-blue-50 rounded-lg\">\n                    <Bell className=\"w-4 h-4 text-blue-600 mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-gray-900\">{notification.message}</p>\n                      <p className=\"text-xs text-gray-500\">\n                        {new Date(notification.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":14646},"client/src/pages/customer/checkout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Package, \n  CreditCard, \n  Calendar, \n  MapPin, \n  Clock,\n  ShoppingBag,\n  CheckCircle,\n  ArrowLeft,\n  Truck,\n  Shield\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport NavigationHeader from \"@/components/NavigationHeader\";\n\ndeclare global {\n  interface Window {\n    Razorpay: any;\n  }\n}\n\nexport default function CustomerCheckout() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [cartItems, setCartItems] = useState<any[]>([]);\n  const [orderDetails, setOrderDetails] = useState({\n    startDate: \"\",\n    endDate: \"\",\n    notes: \"\",\n    deliveryAddress: \"\",\n    phone: \"\",\n    customerName: \"John Doe\",\n    customerEmail: \"john@example.com\"\n  });\n\n  // Mock current user - replace with real authentication\n  const currentUser = {\n    firstName: \"John\",\n    lastName: \"Doe\", \n    email: \"john.doe@example.com\",\n    profileImageUrl: undefined\n  };\n\n  // Load Razorpay script\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n    script.async = true;\n    document.body.appendChild(script);\n\n    // Load cart items from localStorage (using correct key)\n    const stored = localStorage.getItem(\"rentalCart\");\n    if (stored) {\n      setCartItems(JSON.parse(stored));\n    }\n\n    return () => {\n      if (document.body.contains(script)) {\n        document.body.removeChild(script);\n      }\n    };\n  }, []);\n\n  const calculateSubtotal = () => {\n    return cartItems.reduce((sum, item) => sum + (item.total || 0), 0);\n  };\n\n  const calculateSecurityDeposit = () => {\n    return cartItems.reduce((sum, item) => sum + (parseFloat(item.product?.securityDeposit || \"0\") * item.quantity), 0);\n  };\n\n  const calculateTotal = () => {\n    return calculateSubtotal() + calculateSecurityDeposit();\n  };\n\n  const createRazorpayOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/razorpay/create-order\", orderData);\n      return response;\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Payment Setup Failed\",\n        description: error.message || \"Failed to initialize payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyPaymentMutation = useMutation({\n    mutationFn: async (paymentData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/razorpay/verify-payment\", paymentData);\n      return response;\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Order Placed Successfully!\",\n        description: \"Your rental order has been confirmed. You'll receive an email confirmation shortly.\",\n      });\n      localStorage.removeItem(\"rentalCart\");\n      setLocation(\"/customer/home\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Payment Verification Failed\",\n        description: error.message || \"Payment verification failed. Please contact support.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePlaceOrder = async () => {\n    if (!orderDetails.startDate || !orderDetails.endDate) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields including rental dates.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (cartItems.length === 0) {\n      toast({\n        title: \"Empty Cart\",\n        description: \"Please add items to your cart before checkout.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const orderData = {\n      items: cartItems,\n      customerDetails: orderDetails,\n      totalAmount: calculateTotal(),\n      securityDeposit: calculateSecurityDeposit()\n    };\n\n    try {\n      const razorpayOrder = await createRazorpayOrderMutation.mutateAsync(orderData);\n\n      const options = {\n        key: import.meta.env.VITE_RAZORPAY_KEY_ID,\n        amount: razorpayOrder.amount,\n        currency: \"INR\",\n        name: \"RentPro\",\n        description: \"Equipment Rental Payment\",\n        order_id: razorpayOrder.id,\n        handler: function (response: any) {\n          verifyPaymentMutation.mutate({\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_signature: response.razorpay_signature,\n            orderData\n          });\n        },\n        prefill: {\n          name: orderDetails.customerName,\n          email: orderDetails.customerEmail,\n          contact: orderDetails.phone\n        },\n        theme: {\n          color: \"#2563eb\"\n        },\n        modal: {\n          ondismiss: function () {\n            toast({\n              title: \"Payment Cancelled\",\n              description: \"Payment was cancelled. You can try again anytime.\",\n              variant: \"destructive\",\n            });\n          }\n        }\n      };\n\n      const rzp = new window.Razorpay(options);\n      rzp.open();\n    } catch (error) {\n      console.error(\"Payment initialization failed:\", error);\n    }\n  };\n\n  const getRentalDays = () => {\n    if (!orderDetails.startDate || !orderDetails.endDate) return 1;\n    const start = new Date(orderDetails.startDate);\n    const end = new Date(orderDetails.endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return Math.max(1, diffDays);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader userType=\"customer\" currentUser={currentUser} />\n      \n      {/* Checkout Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" onClick={() => setLocation(\"/customer/cart\")}>\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Cart\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Checkout</h1>\n                <p className=\"text-gray-600\">Complete your rental order</p>\n              </div>\n            </div>\n            <Badge variant=\"secondary\" className=\"text-lg px-3 py-1\">\n              {cartItems.length} {cartItems.length === 1 ? 'Item' : 'Items'}\n            </Badge>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Left Column - Order Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Rental Details */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"w-5 h-5 mr-2\" />\n                  Rental Period\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"startDate\">Start Date *</Label>\n                    <Input\n                      id=\"startDate\"\n                      type=\"date\"\n                      value={orderDetails.startDate}\n                      onChange={(e) => setOrderDetails(prev => ({ ...prev, startDate: e.target.value }))}\n                      min={new Date().toISOString().split('T')[0]}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"endDate\">End Date *</Label>\n                    <Input\n                      id=\"endDate\"\n                      type=\"date\"\n                      value={orderDetails.endDate}\n                      onChange={(e) => setOrderDetails(prev => ({ ...prev, endDate: e.target.value }))}\n                      min={orderDetails.startDate || new Date().toISOString().split('T')[0]}\n                      required\n                    />\n                  </div>\n                </div>\n                {orderDetails.startDate && orderDetails.endDate && (\n                  <div className=\"bg-blue-50 p-3 rounded-lg\">\n                    <p className=\"text-sm text-blue-800\">\n                      <Clock className=\"w-4 h-4 inline mr-1\" />\n                      Rental Duration: {getRentalDays()} {getRentalDays() === 1 ? 'day' : 'days'}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Delivery Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <MapPin className=\"w-5 h-5 mr-2\" />\n                  Delivery Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"customerName\">Full Name *</Label>\n                  <Input\n                    id=\"customerName\"\n                    value={orderDetails.customerName}\n                    onChange={(e) => setOrderDetails(prev => ({ ...prev, customerName: e.target.value }))}\n                    placeholder=\"Enter your full name\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Phone Number *</Label>\n                  <Input\n                    id=\"phone\"\n                    value={orderDetails.phone}\n                    onChange={(e) => setOrderDetails(prev => ({ ...prev, phone: e.target.value }))}\n                    placeholder=\"Enter your phone number\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"deliveryAddress\">Delivery Address *</Label>\n                  <Textarea\n                    id=\"deliveryAddress\"\n                    value={orderDetails.deliveryAddress}\n                    onChange={(e) => setOrderDetails(prev => ({ ...prev, deliveryAddress: e.target.value }))}\n                    placeholder=\"Enter complete delivery address\"\n                    rows={3}\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"notes\">Special Instructions (Optional)</Label>\n                  <Textarea\n                    id=\"notes\"\n                    value={orderDetails.notes}\n                    onChange={(e) => setOrderDetails(prev => ({ ...prev, notes: e.target.value }))}\n                    placeholder=\"Any special delivery instructions or notes\"\n                    rows={2}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Order Summary */}\n          <div className=\"space-y-6\">\n            {/* Cart Items */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <ShoppingBag className=\"w-5 h-5 mr-2\" />\n                  Order Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {cartItems.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Package className=\"mx-auto h-12 w-12 text-gray-400\" />\n                    <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No items in cart</h3>\n                    <p className=\"mt-1 text-sm text-gray-500\">\n                      Add some equipment to your cart to continue.\n                    </p>\n                    <Button className=\"mt-4\" onClick={() => setLocation(\"/customer/products\")}>\n                      Browse Equipment\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {cartItems.map((item, index) => (\n                      <div key={index} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"flex-shrink-0\">\n                          <Package className=\"h-10 w-10 text-gray-400\" />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"text-sm font-medium text-gray-900 truncate\">\n                            {item.product?.name || item.name}\n                          </h4>\n                          <p className=\"text-sm text-gray-500\">\n                            Qty: {item.quantity} | {item.rentalPeriod}\n                          </p>\n                          <p className=\"text-sm font-medium text-gray-900\">\n                            ₹{item.total.toLocaleString()}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Pricing Breakdown */}\n            {cartItems.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <CreditCard className=\"w-5 h-5 mr-2\" />\n                    Payment Summary\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Rental Subtotal</span>\n                      <span>₹{calculateSubtotal().toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"flex items-center\">\n                        Security Deposit\n                        <Shield className=\"w-3 h-3 ml-1\" />\n                      </span>\n                      <span>₹{calculateSecurityDeposit().toLocaleString()}</span>\n                    </div>\n                    <Separator />\n                    <div className=\"flex justify-between font-semibold text-lg\">\n                      <span>Total Amount</span>\n                      <span>₹{calculateTotal().toLocaleString()}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-yellow-50 p-3 rounded-lg\">\n                    <p className=\"text-xs text-yellow-800\">\n                      <Shield className=\"w-3 h-3 inline mr-1\" />\n                      Security deposit will be refunded after equipment return in good condition\n                    </p>\n                  </div>\n\n                  <Button \n                    className=\"w-full\" \n                    size=\"lg\"\n                    onClick={handlePlaceOrder}\n                    disabled={createRazorpayOrderMutation.isPending || verifyPaymentMutation.isPending}\n                  >\n                    {createRazorpayOrderMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin w-4 h-4 mr-2 border-2 border-white border-t-transparent rounded-full\" />\n                        Setting up payment...\n                      </>\n                    ) : verifyPaymentMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin w-4 h-4 mr-2 border-2 border-white border-t-transparent rounded-full\" />\n                        Processing order...\n                      </>\n                    ) : (\n                      <>\n                        <CreditCard className=\"w-4 h-4 mr-2\" />\n                        Pay ₹{calculateTotal().toLocaleString()}\n                      </>\n                    )}\n                  </Button>\n\n                  <div className=\"text-center\">\n                    <p className=\"text-xs text-gray-500\">\n                      Secure payment powered by Razorpay\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16626},"client/src/pages/customer/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport NavigationHeader from \"@/components/NavigationHeader\";\nimport { \n  Package, \n  Clock, \n  CreditCard, \n  Bell, \n  Calendar,\n  ShoppingBag,\n  TrendingUp,\n  MapPin,\n  Star\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { api } from \"@/lib/api\";\n\nexport default function CustomerHome() {\n  const [, setLocation] = useLocation();\n\n  // Mock current user - replace with real authentication\n  const currentUser = {\n    firstName: \"John\",\n    lastName: \"Doe\", \n    email: \"john.doe@example.com\",\n    profileImageUrl: undefined\n  };\n\n  const { data: orders, isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\", \"customer\"],\n    queryFn: () => api.getOrders(),\n  });\n\n  const { data: notifications } = useQuery({\n    queryKey: [\"/api/notifications\", \"customer\"],\n    queryFn: () => api.getNotifications(\"customer-id\"),\n  });\n\n  const activeRentals = orders?.filter(order => \n    order.status === \"confirmed\" || order.status === \"delivered\"\n  ) || [];\n\n  const recentOrders = orders?.slice(0, 5) || [];\n\n  const totalSpent = orders?.reduce((sum, order) => \n    sum + parseFloat(order.totalAmount || \"0\"), 0\n  ) || 0;\n\n  const quickActions = [\n    {\n      icon: Package,\n      label: \"Browse Equipment\",\n      description: \"Explore our rental catalog\",\n      action: () => setLocation(\"/customer/products\"),\n      color: \"bg-blue-500\"\n    },\n    {\n      icon: ShoppingBag,\n      label: \"View Cart\",\n      description: \"Check your selected items\",\n      action: () => setLocation(\"/customer/cart\"),\n      color: \"bg-green-500\"\n    },\n    {\n      icon: Calendar,\n      label: \"My Orders\",\n      description: \"Track your rental history\",\n      action: () => setLocation(\"/customer/orders\"),\n      color: \"bg-purple-500\"\n    },\n    {\n      icon: Bell,\n      label: \"Notifications\",\n      description: \"View updates and alerts\",\n      action: () => setLocation(\"/customer/notifications\"),\n      color: \"bg-orange-500\"\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"confirmed\": return \"bg-blue-100 text-blue-800\";\n      case \"delivered\": return \"bg-green-100 text-green-800\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\";\n      case \"returned\": return \"bg-gray-100 text-gray-800\";\n      case \"cancelled\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader userType=\"customer\" currentUser={currentUser} />\n      \n      {/* Welcome Section */}\n      <div className=\"bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Welcome Back, {currentUser.firstName}!</h1>\n              <p className=\"text-gray-600 mt-1\">Manage your equipment rentals and discover new gear</p>\n            </div>\n            <Button onClick={() => setLocation(\"/customer/products\")}>\n              <Package className=\"w-4 h-4 mr-2\" />\n              Browse Equipment\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <Package className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <h3 className=\"text-sm font-medium text-gray-500\">Active Rentals</h3>\n                  <p className=\"text-2xl font-bold text-gray-900\">{activeRentals.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <CreditCard className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <h3 className=\"text-sm font-medium text-gray-500\">Total Spent</h3>\n                  <p className=\"text-2xl font-bold text-gray-900\">₹{totalSpent.toLocaleString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\n                  <TrendingUp className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <h3 className=\"text-sm font-medium text-gray-500\">Total Orders</h3>\n                  <p className=\"text-2xl font-bold text-gray-900\">{orders?.length || 0}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Star className=\"w-5 h-5 mr-2\" />\n              Quick Actions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {quickActions.map((action, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                  onClick={action.action}\n                >\n                  <div className={`p-2 rounded-lg ${action.color} text-white`}>\n                    <action.icon className=\"h-6 w-6\" />\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"font-medium\">{action.label}</p>\n                    <p className=\"text-sm text-gray-500\">{action.description}</p>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Active Rentals */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center\">\n                <Clock className=\"w-5 h-5 mr-2\" />\n                Active Rentals\n              </CardTitle>\n              {activeRentals.length > 0 && (\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setLocation(\"/customer/orders\")}>\n                  View All\n                </Button>\n              )}\n            </CardHeader>\n            <CardContent>\n              {activeRentals.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Package className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No active rentals</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    Start browsing our equipment catalog to place your first order.\n                  </p>\n                  <Button className=\"mt-4\" onClick={() => setLocation(\"/customer/products\")}>\n                    Browse Equipment\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {activeRentals.map((rental) => (\n                    <div key={rental.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium\">Order #{rental.orderNumber}</h4>\n                        <Badge className={getStatusColor(rental.status)}>\n                          {rental.status}\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm text-gray-600 space-y-1\">\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"w-4 h-4 mr-1\" />\n                          {new Date(rental.startDate).toLocaleDateString()} - {new Date(rental.endDate).toLocaleDateString()}\n                        </div>\n                        <div className=\"flex items-center\">\n                          <CreditCard className=\"w-4 h-4 mr-1\" />\n                          ₹{parseFloat(rental.totalAmount).toLocaleString()}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Recent Orders */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center\">\n                <ShoppingBag className=\"w-5 h-5 mr-2\" />\n                Recent Orders\n              </CardTitle>\n              {recentOrders.length > 0 && (\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setLocation(\"/customer/orders\")}>\n                  View All\n                </Button>\n              )}\n            </CardHeader>\n            <CardContent>\n              {ordersLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : recentOrders.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <ShoppingBag className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No orders yet</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    Your order history will appear here once you make your first rental.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {recentOrders.map((order) => (\n                    <div key={order.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium\">#{order.orderNumber}</h4>\n                        <Badge className={getStatusColor(order.status)}>\n                          {order.status}\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        <p>{new Date(order.createdAt).toLocaleDateString()}</p>\n                        <p className=\"font-medium\">₹{parseFloat(order.totalAmount).toLocaleString()}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Notifications */}\n        {notifications && notifications.length > 0 && (\n          <Card className=\"mt-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Bell className=\"w-5 h-5 mr-2\" />\n                Recent Notifications\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {notifications.slice(0, 3).map((notification) => (\n                  <div key={notification.id} className=\"flex items-start space-x-3 p-3 bg-blue-50 rounded-lg\">\n                    <Bell className=\"w-4 h-4 text-blue-600 mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-gray-900\">{notification.message}</p>\n                      <p className=\"text-xs text-gray-500\">\n                        {new Date(notification.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":12523}}}